# utils.py (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ì–ï–ù–ï–†–ê–¶–ò–ï–ô PDF)

import logging
from datetime import datetime 
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, InlineKeyboardMarkup
from functools import wraps
from telegram.ext import ContextTypes
import config
from io import BytesIO

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è PDF –∏ –∞—É–¥–∏–æ
from pydub import AudioSegment
from fpdf import FPDF
import asyncio

import database as db
from constants import TIER_FREE, OUTPUT_FORMAT_TEXT, OUTPUT_FORMAT_TXT, OUTPUT_FORMAT_PDF
logger = logging.getLogger(__name__)


# --- [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê –° –ì–ï–ù–ï–†–ê–¢–û–†–û–ú PDF ---

def create_pdf_from_text(text: str) -> bytes:
    """
    –°–æ–∑–¥–∞–µ—Ç PDF-—Ñ–∞–π–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –°–ò–ù–•–†–û–ù–ù–û–ô –∏ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ run_in_executor.
    
    :param text: –¢–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ PDF.
    :return: PDF-—Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤.
    """
    pdf = FPDF()
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode (–¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
    #    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª DejaVuSans.ttf –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ assets
    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        pdf.add_font('DejaVu', '', 'assets/DejaVuSans.ttf')
    except RuntimeError:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ FPDF –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞
        logger.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à—Ä–∏—Ñ—Ç–∞ 'assets/DejaVuSans.ttf'. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. "
            "PDF –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã."
        )
        # –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        pdf.set_font('Arial', size=12)
    else:
        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        pdf.set_font('DejaVu', size=7)
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    pdf.add_page()
    
    # 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º multi_cell –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
    #    w=0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —è—á–µ–π–∫–∞ –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –≤—Å—é —à–∏—Ä–∏–Ω—É –æ—Ç –ª–µ–≤–æ–≥–æ –¥–æ –ø—Ä–∞–≤–æ–≥–æ –ø–æ–ª—è.
    #    h=10 - –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
    pdf.multi_cell(w=0, h=5, text=text)
    
    # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
    return pdf.output()

# --- [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é."""
    keyboard = [
        [KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏"), KeyboardButton("–í—ã–±–æ—Ä AI")],
        [KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("ü§ñ AGM, –Ω–∞—É—á–∏ –º–µ–Ω—è!")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


async def delete_message_callback(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ü–æ–ª—É—á–∞–µ—Ç chat_id –∏ message_id –∏–∑ job.data."""
    job_data = context.job.data
    try:
        await context.bot.delete_message(chat_id=job_data['chat_id'], message_id=job_data['message_id'])
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {job_data['message_id']} –≤ —á–∞—Ç–µ {job_data['chat_id']} —É–¥–∞–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {job_data['message_id']} –≤ —á–∞—Ç–µ {job_data['chat_id']}: {e}")


async def send_long_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE,
    text: str, 
    reply_markup: InlineKeyboardMarkup = None,
    output_format: str = OUTPUT_FORMAT_TEXT
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–µ–∫—Å—Ç, txt –∏–ª–∏ PDF).
    """
    message_to_interact = update.message or (update.callback_query and update.callback_query.message)
    chat_id = message_to_interact.chat_id

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã–≤–æ–¥–∞ ---
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç
    if output_format == OUTPUT_FORMAT_TEXT:
        max_length = 4096
        if len(text) <= max_length:
            await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
        else:
            parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
            for i, part in enumerate(parts):
                current_reply_markup = reply_markup if i == len(parts) - 1 else None
                await context.bot.send_message(chat_id=chat_id, text=part, reply_markup=current_reply_markup)

    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–º .txt
    elif output_format == OUTPUT_FORMAT_TXT:
        try:
            text_bytes = text.encode('utf-8')
            text_file = BytesIO(text_bytes)
            await context.bot.send_document(
                chat_id=chat_id,
                document=text_file,
                filename="response.txt",
                caption="–í–∞—à –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .txt —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å .txt —Ñ–∞–π–ª. –í–æ—Ç –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:")
            await send_long_message(update, context, text, reply_markup, OUTPUT_FORMAT_TEXT)

    # --- [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ë–õ–û–ö–ï PDF ---
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–º .pdf
    elif output_format == OUTPUT_FORMAT_PDF:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
            # —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.
            loop = asyncio.get_running_loop()
            pdf_bytes = await loop.run_in_executor(None, create_pdf_from_text, text)
            
            pdf_file = BytesIO(pdf_bytes)
            # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í–∞–∂–Ω–æ! Telegram —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã —É —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ø–∞–º—è—Ç–∏ –±—ã–ª–æ –∏–º—è.
            pdf_file.name = "response.pdf" 
            
            await context.bot.send_document(
                chat_id=chat_id,
                document=pdf_file,
                filename="response.pdf", # –ò–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                caption="–í–∞—à –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .pdf —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å .pdf —Ñ–∞–π–ª. –í–æ—Ç –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            await send_long_message(update, context, text, reply_markup, OUTPUT_FORMAT_TEXT)
    # --- [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ë–õ–û–ö–ï PDF ---
            

async def get_actual_user_tier(user_data: dict) -> str:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç
    –µ–µ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ.
    """
    current_tier = user_data.get('subscription_tier', TIER_FREE)
    expiry_date_str = user_data.get('subscription_expiry_date')
    if current_tier != TIER_FREE and expiry_date_str:
        expiry_date = datetime.fromisoformat(expiry_date_str) if isinstance(expiry_date_str, str) else expiry_date_str
        if expiry_date and expiry_date < datetime.now():
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_data['id']} –∏—Å—Ç–µ–∫–ª–∞. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ 'free'.")
            await db.set_user_tier_to_free(user_data['id'])
            return TIER_FREE
    return current_tier


def require_verification(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.message and update.message.text and update.message.text.startswith('/start'):
            return await func(update, context, *args, **kwargs)

        user_data = await db.get_user_by_telegram_id(update.effective_user.id)

        if user_data and user_data.get('is_verified'):
            return await func(update, context, *args, **kwargs)
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ù–∞–∂–º–∏—Ç–µ /start"
            )
            if update.callback_query:
                await update.callback_query.answer()
            return
            
    return wrapper


def inject_user_data(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π "–≤–Ω–µ–¥—Ä—è–µ—Ç" user_data –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    """
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = await db.add_or_update_user(
            update.effective_user.id,
            update.effective_user.full_name,
            update.effective_user.username
        )
        if not user_id:
            message = update.message or update.callback_query.message
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        user_data = await db.get_user_by_id(user_id)
        if not user_data:
            message = update.message or update.callback_query.message
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
            return
        return await func(update, context, user_data=user_data, *args, **kwargs)
    return wrapper


class FileSizeError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤."""
    pass


async def get_text_content_from_document(document_file, context: ContextTypes.DEFAULT_TYPE) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞.
    """
    if document_file.mime_type != 'text/plain' and not document_file.file_name.lower().endswith('.txt'):
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt).")
    if document_file.file_size and document_file.file_size > config.ABSOLUTE_MAX_FILE_CHARS * 4: 
        raise FileSizeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{config.ABSOLUTE_MAX_FILE_CHARS * 4} –±–∞–π—Ç).")
    file = await context.bot.get_file(document_file.file_id)
    downloaded_bytes = await file.download_as_bytearray()
    try:
        text_content = downloaded_bytes.decode('utf-8')
    except UnicodeDecodeError:
        text_content = downloaded_bytes.decode('windows-1251', errors='ignore')
    if len(text_content) > config.ABSOLUTE_MAX_FILE_CHARS:
        raise FileSizeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º: {config.ABSOLUTE_MAX_FILE_CHARS}.")
    return text_content


def convert_oga_to_mp3_in_memory(oga_bytearray: bytearray) -> bytes:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ OGG/Opus (–æ—Ç Telegram) –≤ MP3 –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
    """
    oga_audio_stream = BytesIO(oga_bytearray)
    audio = AudioSegment.from_file(oga_audio_stream, format="ogg")
    mp3_buffer = BytesIO()
    audio.export(mp3_buffer, format="mp3")
    return mp3_buffer.getvalue()