# utils.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - 29.06.2025)

import logging
import re
import html
from datetime import datetime 
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, InlineKeyboardMarkup
from functools import wraps
from telegram.ext import ContextTypes
import config
from io import BytesIO
from pydub import AudioSegment
from fpdf import FPDF
import asyncio

import database as db
from constants import TIER_FREE, OUTPUT_FORMAT_TEXT, OUTPUT_FORMAT_TXT, OUTPUT_FORMAT_PDF
logger = logging.getLogger(__name__)


# --- –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê ---

def markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Telegram HTML."""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–Ω—ä–µ–∫—Ü–∏–π
    processed_text = html.escape(text)

    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: –æ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –∫ –º–µ–Ω–µ–µ.
    # –°–Ω–∞—á–∞–ª–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –¥–∞–ª—å—à–µ
    processed_text = re.sub(r'```(.*?)```', r'<pre>\1</pre>', processed_text, flags=re.DOTALL)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
    processed_text = re.sub(r'^\s*### (.*?)\s*$', r'<b>\1</b>', processed_text, flags=re.MULTILINE)
    processed_text = re.sub(r'^\s*## (.*?)\s*$', r'<b>\1</b>', processed_text, flags=re.MULTILINE)
    processed_text = re.sub(r'^\s*# (.*?)\s*$', r'<b>\1</b>', processed_text, flags=re.MULTILINE)
    
    # –ñ–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤
    processed_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', processed_text)
    processed_text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', processed_text)
    
    # –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥
    processed_text = re.sub(r'`(.*?)`', r'<code>\1</code>', processed_text)
    
    # "–†–∞–∑-—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º" –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ (–∫–∞–≤—ã—á–∫–∏, –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã)
    processed_text = html.unescape(processed_text)

    return processed_text


def strip_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ TXT."""
    return re.sub('<[^<]+?>', '', text)


# --- –ö–õ–ê–°–° –î–õ–Ø "–£–ú–ù–û–ô" –ì–ï–ù–ï–†–ê–¶–ò–ò PDF ---

class PDF(FPDF):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑–æ–≤–æ–≥–æ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.set_auto_page_break(True, margin=15)
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ 4 –Ω—É–∂–Ω—ã—Ö –Ω–∞–º —à—Ä–∏—Ñ—Ç–∞
            self.add_font('DejaVu', '', 'assets/DejaVuSans.ttf')
            self.add_font('DejaVu', 'B', 'assets/DejaVuSans-Bold.ttf')
            self.add_font('DejaVu', 'I', 'assets/DejaVuSans-Oblique.ttf')
            self.add_font('DejaVuMono', '', 'assets/DejaVuSansMono.ttf') # –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π
            
            self.set_font('DejaVu', '', 11) 
        except RuntimeError as e:
            logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –®–†–ò–§–¢–û–í: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ 4 —Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–æ–≤ DejaVu –ª–µ–∂–∞—Ç –≤ –ø–∞–ø–∫–µ /assets. PDF –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏.")
            self.set_font('Arial', '', 11)

    def write_html(self, html_text: str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –±–∞–∑–æ–≤—ã–º–∏ HTML —Ç–µ–≥–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –≤ PDF."""
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Ç–µ–≥–∞–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–∞–º–∏ —Ç–µ–≥–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        parts = re.split(r'(<b>|</b>|<i>|</i>|<code>|</code>|<pre>|</pre>)', html_text)
        
        for part in parts:
            if not part: continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ split

            if part == '<b>':
                self.set_font(style='B')
            elif part == '</b>':
                self.set_font(style='')
            elif part == '<i>':
                self.set_font(style='I')
            elif part == '</i>':
                self.set_font(style='')
            elif part == '<code>' or part == '<pre>':
                self.set_font('DejaVuMono', size=10) # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ë–ï–ó–û–ü–ê–°–ù–´–ô –®–†–ò–§–¢
            elif part == '</code>' or part == '</pre>':
                self.set_font('DejaVu', '', 11) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —à—Ä–∏—Ñ—Ç
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–ø–∏—Å–∫–æ–≤
                clean_part = html.unescape(part)
                lines = clean_part.split('\n')
                for line in lines:
                    stripped_line = line.strip()
                    if not stripped_line: continue

                    if stripped_line.startswith('- '):
                        self.set_x(15)
                        self.multi_cell(0, 7, f"‚Ä¢ {stripped_line[2:]}")
                    else:
                        self.set_x(10)
                        self.multi_cell(0, 7, stripped_line)


def create_pdf_from_html(html_text: str) -> bytes:
    """–°–æ–∑–¥–∞–µ—Ç PDF-—Ñ–∞–π–ª –∏–∑ HTML-—Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä PDF."""
    pdf = PDF()
    pdf.add_page()
    pdf.write_html(html_text)
    return pdf.output()


# --- –û–°–ù–û–í–ù–´–ï –£–¢–ò–õ–ò–¢–´ ---

def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [[KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏"), KeyboardButton("–í—ã–±–æ—Ä AI")], [KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("ü§ñ AGM, –Ω–∞—É—á–∏ –º–µ–Ω—è!")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


async def delete_message_callback(context: ContextTypes.DEFAULT_TYPE) -> None:
    job_data = context.job.data
    try:
        await context.bot.delete_message(chat_id=job_data['chat_id'], message_id=job_data['message_id'])
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {job_data['message_id']} –≤ —á–∞—Ç–µ {job_data['chat_id']}: {e}")


async def send_long_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE,
    text: str, 
    reply_markup: InlineKeyboardMarkup = None,
    output_format: str = OUTPUT_FORMAT_TEXT
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (HTML, txt –∏–ª–∏ PDF)."""
    message_to_interact = update.message or (update.callback_query and update.callback_query.message)
    chat_id = message_to_interact.chat_id

    if output_format == OUTPUT_FORMAT_TEXT:
        max_length = 4096
        if len(text) <= max_length:
            await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
            for i, part in enumerate(parts):
                current_reply_markup = reply_markup if i == len(parts) - 1 else None
                await context.bot.send_message(chat_id=chat_id, text=part, reply_markup=current_reply_markup, parse_mode='HTML')

    elif output_format == OUTPUT_FORMAT_TXT:
        try:
            clean_text = strip_html_tags(text)
            text_bytes = clean_text.encode('utf-8')
            text_file = BytesIO(text_bytes)
            await context.bot.send_document(
                chat_id=chat_id, document=text_file, filename="response.txt", caption="–í–∞—à –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .txt —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å .txt —Ñ–∞–π–ª.")

    elif output_format == OUTPUT_FORMAT_PDF:
        try:
            loop = asyncio.get_running_loop()
            pdf_bytes = await loop.run_in_executor(None, create_pdf_from_html, text)
            pdf_file = BytesIO(pdf_bytes)
            pdf_file.name = "response.pdf" 
            await context.bot.send_document(
                chat_id=chat_id, document=pdf_file, filename="response.pdf", caption="–í–∞—à –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .pdf —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å .pdf —Ñ–∞–π–ª.")


async def get_actual_user_tier(user_data: dict) -> str:
    current_tier = user_data.get('subscription_tier', TIER_FREE)
    expiry_date_str = user_data.get('subscription_expiry_date')
    if current_tier != TIER_FREE and expiry_date_str:
        expiry_date = datetime.fromisoformat(expiry_date_str) if isinstance(expiry_date_str, str) else expiry_date_str
        if expiry_date and expiry_date < datetime.now():
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_data['id']} –∏—Å—Ç–µ–∫–ª–∞. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ 'free'.")
            await db.set_user_tier_to_free(user_data['id'])
            return TIER_FREE
    return current_tier


def require_verification(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.message and update.message.text and update.message.text.startswith('/start'):
            return await func(update, context, *args, **kwargs)
        user_data = await db.get_user_by_telegram_id(update.effective_user.id)
        if user_data and user_data.get('is_verified'):
            return await func(update, context, *args, **kwargs)
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ù–∞–∂–º–∏—Ç–µ /start")
            if update.callback_query:
                await update.callback_query.answer()
            return
    return wrapper


def inject_user_data(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = await db.add_or_update_user(update.effective_user.id, update.effective_user.full_name, update.effective_user.username)
        if not user_id:
            message = update.message or update.callback_query.message
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        user_data = await db.get_user_by_id(user_id)
        if not user_data:
            message = update.message or update.callback_query.message
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
            return
        return await func(update, context, user_data=user_data, *args, **kwargs)
    return wrapper


class FileSizeError(Exception):
    pass


async def get_text_content_from_document(document_file, context: ContextTypes.DEFAULT_TYPE) -> str:
    if document_file.mime_type != 'text/plain' and not document_file.file_name.lower().endswith('.txt'):
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt).")
    if document_file.file_size and document_file.file_size > config.ABSOLUTE_MAX_FILE_CHARS * 4: 
        raise FileSizeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{config.ABSOLUTE_MAX_FILE_CHARS * 4} –±–∞–π—Ç).")
    file = await context.bot.get_file(document_file.file_id)
    downloaded_bytes = await file.download_as_bytearray()
    try:
        text_content = downloaded_bytes.decode('utf-8')
    except UnicodeDecodeError:
        text_content = downloaded_bytes.decode('windows-1251', errors='ignore')
    if len(text_content) > config.ABSOLUTE_MAX_FILE_CHARS:
        raise FileSizeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º: {config.ABSOLUTE_MAX_FILE_CHARS}.")
    return text_content


def convert_oga_to_mp3_in_memory(oga_bytearray: bytearray) -> bytes:
    oga_audio_stream = BytesIO(oga_bytearray)
    audio = AudioSegment.from_file(oga_audio_stream, format="ogg")
    mp3_buffer = BytesIO()
    audio.export(mp3_buffer, format="mp3")
    return mp3_buffer.getvalue()