# utils.py

import logging
from datetime import datetime 
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, InlineKeyboardMarkup
from functools import wraps
from telegram.ext import ContextTypes
import config
from io import BytesIO
from pydub import AudioSegment
import database as db
from constants import TIER_FREE
logger = logging.getLogger(__name__)

def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏"), KeyboardButton("–í—ã–±–æ—Ä AI")],
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ –ö–ù–û–ü–ö–ò –ó–î–ï–°–¨
        [KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("ü§ñ AGM, –Ω–∞—É—á–∏ –º–µ–Ω—è!")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def delete_message_callback(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ü–æ–ª—É—á–∞–µ—Ç chat_id –∏ message_id –∏–∑ job.data."""
    job_data = context.job.data
    try:
        await context.bot.delete_message(chat_id=job_data['chat_id'], message_id=job_data['message_id'])
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {job_data['message_id']} –≤ —á–∞—Ç–µ {job_data['chat_id']} —É–¥–∞–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {job_data['message_id']} –≤ —á–∞—Ç–µ {job_data['chat_id']}: {e}")

async def send_long_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –î–æ–±–∞–≤–ª—è–µ–º context –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    text: str, 
    reply_markup: InlineKeyboardMarkup = None
):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
    [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –¢–µ–ø–µ—Ä—å —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –Ω–∞ callback.
    """
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç.
    # –ï—Å–ª–∏ –µ—Å—Ç—å message - —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –Ω–µ—Ç - —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback, –Ω—É–∂–µ–Ω chat_id.
    message_to_reply = update.message or (update.callback_query and update.callback_query.message)
    chat_id = message_to_reply.chat_id if message_to_reply else update.effective_chat.id

    max_length = 4096
    if len(text) <= max_length:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup
        )
    else:
        parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
        for i, part in enumerate(parts):
            current_reply_markup = reply_markup if i == len(parts) - 1 else None
            await context.bot.send_message(
                chat_id=chat_id,
                text=part,
                reply_markup=current_reply_markup
            )
            
async def get_actual_user_tier(user_data: dict) -> str:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç
    –µ–µ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –≠—Ç–æ –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã.
    """
    current_tier = user_data.get('subscription_tier', TIER_FREE)
    expiry_date_str = user_data.get('subscription_expiry_date')
    if current_tier != TIER_FREE and expiry_date_str:
        expiry_date = datetime.fromisoformat(expiry_date_str) if isinstance(expiry_date_str, str) else expiry_date_str
        if expiry_date and expiry_date < datetime.now():
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_data['id']} –∏—Å—Ç–µ–∫–ª–∞. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ 'free'.")
            await db.set_user_tier_to_free(user_data['id'])
            return TIER_FREE
    return current_tier

def require_verification(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –ï—Å–ª–∏ –Ω–µ—Ç - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.
    """
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if (update.message and update.message.text and update.message.text.startswith('/start')) or \
           (update.message and update.message.entities and any(e.type == 'bot_command' and update.message.text[e.offset:e.offset+e.length] == '/start' for e in update.message.entities)):
            return await func(update, context, *args, **kwargs)
        user_data = await db.get_user_by_telegram_id(update.effective_user.id)
        if user_data and user_data.get('is_verified'):
            return await func(update, context, *args, **kwargs)
        else:
            message = update.message or update.callback_query.message
            await message.reply_text(
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                "–ù–∞–∂–º–∏—Ç–µ /start"
            )
            return
    return wrapper

def inject_user_data(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π "–≤–Ω–µ–¥—Ä—è–µ—Ç" user_data –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    """
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = await db.add_or_update_user(
            update.effective_user.id,
            update.effective_user.full_name,
            update.effective_user.username
        )
        if not user_id:
            message = update.message or update.callback_query.message
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        user_data = await db.get_user_by_id(user_id)
        if not user_data:
            message = update.message or update.callback_query.message
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
            return
        return await func(update, context, user_data=user_data, *args, **kwargs)
    return wrapper

class FileSizeError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤."""
    pass

async def get_text_content_from_document(document_file, context: ContextTypes.DEFAULT_TYPE) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞.
    """
    if document_file.mime_type != 'text/plain' and not document_file.file_name.lower().endswith('.txt'):
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt).")
    if document_file.file_size and document_file.file_size > config.ABSOLUTE_MAX_FILE_CHARS * 4: 
        raise FileSizeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{config.ABSOLUTE_MAX_FILE_CHARS * 4} –±–∞–π—Ç).")
    file = await context.bot.get_file(document_file.file_id)
    downloaded_bytes = await file.download_as_bytearray()
    try:
        text_content = downloaded_bytes.decode('utf-8')
    except UnicodeDecodeError:
        text_content = downloaded_bytes.decode('windows-1251', errors='ignore')
    if len(text_content) > config.ABSOLUTE_MAX_FILE_CHARS:
        raise FileSizeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º: {config.ABSOLUTE_MAX_FILE_CHARS}.")
    return text_content

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –ê–£–î–ò–û
def convert_oga_to_mp3_in_memory(oga_bytearray: bytearray) -> bytes:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ OGG/Opus (–æ—Ç Telegram) –≤ MP3 –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
    :param oga_bytearray: –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
    :return: –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3 –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤.
    """
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏ –∏–∑ –±–∞–π—Ç–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    oga_audio_stream = BytesIO(oga_bytearray)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –ø–æ—Ç–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é pydub
    audio = AudioSegment.from_file(oga_audio_stream, format="ogg")
    
    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3
    mp3_buffer = BytesIO()
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ MP3 –≤ —ç—Ç–æ—Ç –±—É—Ñ–µ—Ä
    audio.export(mp3_buffer, format="mp3")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
    return mp3_buffer.getvalue()