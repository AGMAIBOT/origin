# billing_manager.py

import logging
import html
from typing import Dict, Any

from telegram import Update
from telegram.ext import ContextTypes

import database as db
import config
from constants import TRANSACTION_TYPE_IMAGE_GEN_COST, TRANSACTION_TYPE_TOPUP # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

logger = logging.getLogger(__name__)

async def get_item_cost(item_type: str, item_identifier: str) -> int:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏ –≤ AGMcoin.
    
    :param item_type: –¢–∏–ø —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'dalle3_image_gen').
    :param item_identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1024x1024' –¥–ª—è DALL-E 3).
    :return: –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ AGMcoin.
    :raises ValueError: –ï—Å–ª–∏ —Ç–∏–ø —É—Å–ª—É–≥–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    cost_usd = 0

    if item_type == 'dalle3_image_gen':
        if item_identifier not in config.DALL_E_3_PRICING:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è DALL-E 3: {item_identifier}")
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è DALL-E 3: {item_identifier}")
        cost_usd = config.DALL_E_3_PRICING[item_identifier]['cost_usd']
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –°—é–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –±—É–¥—É—â–µ–º
    # elif item_type == 'some_other_paid_service':
    #     # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –¥—Ä—É–≥–æ–π —É—Å–ª—É–≥–∏
    #     pass
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–Ω–æ–π —É—Å–ª—É–≥–∏: {item_type}")
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–Ω–æ–π —É—Å–ª—É–≥–∏: {item_type}")

    return int(cost_usd * config.USD_TO_AGM_RATE)

async def perform_deduction(
    user_id: int, 
    item_type: str, # –ù–∞–ø—Ä–∏–º–µ—Ä, 'dalle3_image_gen'
    item_identifier: str, # –ù–∞–ø—Ä–∏–º–µ—Ä, '1024x1024'
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE
) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —É—Å–ª—É–≥—É.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    :param item_type: –¢–∏–ø —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'dalle3_image_gen').
    :param item_identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1024x1024').
    :param update: –û–±—ä–µ–∫—Ç Update –∏–∑ Telegram.
    :param context: –û–±—ä–µ–∫—Ç ContextTypes.DEFAULT_TYPE –∏–∑ Telegram.
    :return: True, –µ—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ), False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    try:
        cost_agm = await get_item_cost(item_type, item_identifier)
    except ValueError as e:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏: {e}"
        )
        return False

    user_account_data = await db.get_user_by_id(user_id)
    if not user_account_data:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
        )
        return False
        
    user_balance = user_account_data.get('balance', 0)

    if user_balance < cost_agm:
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                f"üòî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ AGMcoin –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.</b>\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{user_balance}</code> AGMcoin.\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: <code>{cost_agm}</code> AGMcoin.\n\n"
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ ‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å -> üëõ –ö–æ—à–µ–ª–µ–∫."
            ),
            parse_mode='HTML'
        )
        return False

    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º
    description = f"–û–ø–ª–∞—Ç–∞ {item_type.replace('_', ' ')}: {item_identifier} ({cost_agm} AGMcoin)"
    
    # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ database.py
    success = await db.update_user_balance(
        user_id, 
        -cost_agm, # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        TRANSACTION_TYPE_IMAGE_GEN_COST, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        description=description
    )
    
    if not success:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å {cost_agm} AGMcoin —Å user_id={user_id} –∑–∞ {item_type}:{item_identifier}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return False
        
    return True