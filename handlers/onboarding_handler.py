# handlers/onboarding_handler.py (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ù–ê HTML)

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest

ONBOARDING_PAGES = [
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í—Å—è —Ä–∞–∑–º–µ—Ç–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ HTML
    {
        "text": (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç AGM!</b> \n\n"
            "–Ø –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞ 100%.\n\n"
            "–ù–∞—á–Ω–µ–º —Å —Å–∞–º–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ. –ù–∞–∂–º–∏ '–î–∞–ª—å—à–µ', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö."
        ),
    },
    {
        "text": (
            "üé≠ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏'?</b> \n\n"
            "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ ‚Äî —ç—Ç–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è AI. –í—ã–±—Ä–∞–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Ç—ã –∑–∞–¥–∞–µ—à—å "
            "–º–æ–¥–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è. \n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –∏–ª–∏ —Å–æ '–°—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–º' –¥–ª—è –ø–æ–º–æ—â–∏ —Å —Å—é–∂–µ—Ç–æ–º."
        ),
    },
    {
        "text": (
            "‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</b>\n\n"
            "–°–∞–º–∞—è –º–æ—â–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π! "
            "–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å '–ø—Ä–æ–º–ø—Ç' ‚Äî –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è AI, –æ–ø–∏—Å—ã–≤–∞—é—â—É—é –µ–≥–æ —Ä–æ–ª—å, –∑–Ω–∞–Ω–∏—è –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏.\n\n"
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ–¥ –ª—é–±—É—é —Ç–≤–æ—é –∑–∞–¥–∞—á—É."
        ),
    },
    {
        "text": (
            "üß† <b>–í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏</b>\n\n"
            "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Gemini, GPT). "
            "–ö–∞–∂–¥–∞—è –∏–∑ –Ω–∏—Ö –∏–º–µ–µ—Ç —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã. \n\n"
            "–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏ –≤ –º–µ–Ω—é '–í—ã–±–æ—Ä AI', —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏."
        ),
    },
    {
        "text": (
            "üñºÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
            "–ü–æ–º–∏–º–æ —Ç–µ–∫—Å—Ç–∞, –±–æ—Ç —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π DALL-E 3 –∏ YandexArt. "
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é '–í—ã–±–æ—Ä AI' –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å."
        ),
    },
    {
        "text": (
            "‚úÖ <b>–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> \n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –æ–± –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞. –ù–µ –±–æ–π—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏, "
            "—á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. \n\n"
            "–£–¥–∞—á–∏!"
        ),
    },
]

def _get_onboarding_keyboard(page_index: int) -> InlineKeyboardMarkup:
    buttons = []
    if page_index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="onboarding_prev"))
    
    if page_index < len(ONBOARDING_PAGES) - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="onboarding_next"))

    if page_index == len(ONBOARDING_PAGES) - 1:
        buttons.append(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="onboarding_close"))
        
    return InlineKeyboardMarkup([buttons])

async def show_onboarding_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    page_index = context.user_data.get('onboarding_page_index', 0)
    
    page_content = ONBOARDING_PAGES[page_index]
    text = page_content["text"]
    reply_markup = _get_onboarding_keyboard(page_index)
    
    try:
        if query:
            # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ú–µ–Ω—è–µ–º parse_mode
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    except BadRequest as e:
        if "Message is not modified" in str(e):
            await query.answer()
        else:
            raise

async def handle_onboarding_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    query = update.callback_query
    if not query or not query.data.startswith("onboarding_"):
        return False
        
    await query.answer()
    
    if query.data == "onboarding_close":
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å. üëã")
        context.user_data.pop('onboarding_page_index', None)
        return True

    page_index = context.user_data.get('onboarding_page_index', 0)
    
    if query.data == "onboarding_next": page_index += 1
    elif query.data == "onboarding_prev": page_index -= 1
        
    context.user_data['onboarding_page_index'] = page_index
    
    await show_onboarding_page(update, context)
    
    return True

async def start_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault('onboarding_page_index', 0)
    await show_onboarding_page(update, context)