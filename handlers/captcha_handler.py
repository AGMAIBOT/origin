# handlers/captcha_handler.py (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ù–ê HTML)

import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import database as db
from utils import get_main_keyboard

async def send_captcha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    correct_answer = num1 + num2
    
    context.user_data['captcha_answer'] = correct_answer
    
    answers = {correct_answer}
    while len(answers) < 4:
        wrong_answer = random.randint(2, 20)
        answers.add(wrong_answer)
        
    shuffled_answers = sorted(list(answers))
    
    keyboard = [InlineKeyboardButton(str(ans), callback_data=f"captcha_{ans}") for ans in shuffled_answers]
    reply_markup = InlineKeyboardMarkup([keyboard[i:i+2] for i in range(0, len(keyboard), 2)])
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ú–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ HTML
    text = (
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–ß—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.\n\n"
        f"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç: <b>{num1} + {num2}</b>?"
    )
    
    message_to_use = update.message or update.callback_query.message
    
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await message_to_use.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    except BadRequest as e:
        if "Message is not modified" in str(e): await update.callback_query.answer()
        else: raise

async def handle_captcha_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    query = update.callback_query
    if not query or not query.data.startswith("captcha_"):
        return False

    user_answer = int(query.data.split('_')[1])
    correct_answer = context.user_data.get('captcha_answer')

    if user_answer == correct_answer:
        await query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.", show_alert=True)
        user = update.effective_user
        await db.add_or_update_user(user.id, user.full_name, user.username)
        await db.verify_user(user.id)
        context.user_data.pop('captcha_answer', None)
        await query.delete_message()
        
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –≠—Ç–æ—Ç –±–ª–æ–∫ —É–∂–µ –±—ã–ª –Ω–∞ HTML, —Ç–∞–∫ —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ.
        welcome_text = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}!\n\n"
            "–Ø —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –º–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å –∏–ª–∏ –ª–∏—á–Ω–æ—Å—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é <b>'–ü–µ—Ä—Å–æ–Ω–∞–∂–∏'</b>."
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=welcome_text,
            reply_markup=get_main_keyboard(), parse_mode='HTML'
        )
    else:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await send_captcha(update, context)
        
    return True