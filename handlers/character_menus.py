# handlers/character_menus.py (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ù–ê HTML)

import html
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.error import BadRequest
from telegram.ext import ContextTypes
from io import BytesIO
import database as db
import config
from characters import DEFAULT_CHARACTER_NAME, CHARACTER_CATEGORIES, ALL_PROMPTS
from constants import *
from utils import get_actual_user_tier

TIER_HIERARCHY = {TIER_FREE: 0, TIER_LITE: 1, TIER_PRO: 2}

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –°–õ–û–í–ê–†–ò –î–õ–Ø –ù–û–í–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò "AGM –£—á–∏—Ç–µ–ª—è"
CATEGORY_DESCRIPTIONS = {
    "conversational": "–ê –∏–Ω–æ–≥–¥–∞ –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å –ø–æ –¥—É—à–∞–º, –±–µ–∑ –≤—Å—è–∫–∏—Ö —Ç–∞–º –∑–∞–¥–∞—á –∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –ø—Ä–∞–≤–¥–∞? –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç —Å–ª—É—à–∞—Ç—å, —Å–ª—ã—à–∞—Ç—å –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫ –∏ –¥–∞–∂–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –ó–∞–±—É–¥—å –ø—Ä–æ —Å—É—Ö–∏–µ —Ñ–∞–∫—Ç—ã ‚Äì —ç—Ç–æ —Ç–µ, –∫—Ç–æ –≥–æ—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å —Ä—è–¥–æ–º –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å —Ç–æ–±–æ–π –º–æ–º–µ–Ω—Ç.\n",
    "specialists": "–ù—É–∂–µ–Ω –¥–µ–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–º–æ—â—å –≤ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏? –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–±—Ä–∞–ª–∏—Å—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞! –û—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≥—É—Ä—É –¥–æ –∑–Ω–∞—Ç–æ–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π ‚Äì –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏, –¥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ. –û–Ω–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ä–µ—à–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞—Ç—å!",
    "quest": "–ù–∞–¥–æ–µ–ª–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞—Ç—å? –ó–¥–µ—Å—å —Ç—ã ‚Äì –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π! –ü–æ–≥—Ä—É–∂–∞–π—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Ä—ã, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ç–≤–æ–π –≤—ã–±–æ—Ä —Ä–µ–∞–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç —Å—é–∂–µ—Ç –∏ –≤–µ–¥–µ—Ç –∫ –æ–¥–Ω–æ–π –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–æ–≤–æ–∫. –û—Ç –ø–∏—Ä–∞—Ç—Å–∫–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –¥–æ –±–æ—Ä—å–±—ã –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ ‚Äî –≥–æ—Ç–æ–≤—å—Å—è, —Å–∫—É—á–Ω–æ —Ç–æ—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç!",
    "teachers": "üéì –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç–µ–±—è –∂–¥—É—Ç –º—É–¥—Ä—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏, –≥–æ—Ç–æ–≤—ã–µ –ø–æ–º–æ—á—å –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏. –û—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ ‚Äî –∑–¥–µ—Å—å –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —Å–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ–±—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º." # <<< [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø
}
CATEGORY_DISPLAY_NAMES = {
    "conversational": "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ",
    "specialists": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
    "quest": "–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã (Quest)",
    "teachers": "üéì AGM –£—á–∏—Ç–µ–ª—è" # <<< [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø
}
raw_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≥–æ–ª–æ–∫, –≥–¥–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–µ—Ç–∞—é—Ç... –Ω—É, –ø–æ—á—Ç–∏ –¥—É—à—É! –í —Ä–∞–∑–¥–µ–ª–µ '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏' —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–æ—Ä—ã –∫–æ–¥–∞, –∞ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞–∑—Ä—É–ª–∏—Ç—å –ª—é–±—É—é —Ç–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É; –¥—É—à–µ–≤–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä; –∏, –∫–æ–Ω–µ—á–Ω–æ, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã—Ö –ú–∞—Å—Ç–µ—Ä–æ–≤ –∫–≤–µ—Å—Ç–æ–≤, —á—Ç–æ –∑–∞—Ç—è–Ω—É—Ç —Ç–µ–±—è –≤ —ç–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ —Ç–æ–≥–æ, –∫—Ç–æ —Ç–µ–±–µ –ø–æ –≤–∫—É—Å—É ‚Äì –∏ –ø—É—Å—Ç—å –Ω–∞—á–Ω–µ—Ç—Å—è –º–∞–≥–∏—è –æ–±—â–µ–Ω–∏—è (–∏–ª–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è)!"


def clear_temp_state(context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = STATE_NONE
    context.user_data.pop(TEMP_CHAR_ID, None)
    context.user_data.pop(TEMP_CHAR_NAME, None)
    context.user_data.pop(TEMP_CHAR_PROMPT, None)

async def get_user_id(update: Update) -> int:
    return await db.add_or_update_user(update.effective_user.id, update.effective_user.full_name, update.effective_user.username)

async def _build_standard_character_keyboard(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    user = await db.get_user_by_id(user_id)
    current_char_name = user['current_character_name'] if user else DEFAULT_CHARACTER_NAME
    
    user_tier_name = await get_actual_user_tier(user)
    user_tier_level = TIER_HIERARCHY.get(user_tier_name, 0)

    current_category = context.user_data.get(CURRENT_CHAR_CATEGORY_KEY, "conversational")
    all_character_names = sorted(CHARACTER_CATEGORIES.get(current_category, []))
    
    current_page = context.user_data.get(CURRENT_CHAR_VIEW_PAGE_KEY, 0)
    total_pages = (len(all_character_names) + config.CHARACTERS_PER_PAGE - 1) // config.CHARACTERS_PER_PAGE
    start_index = current_page * config.CHARACTERS_PER_PAGE
    end_index = start_index + config.CHARACTERS_PER_PAGE
    characters_on_page = all_character_names[start_index:end_index]

    keyboard = []
    for i in range(0, len(characters_on_page), 2):
        row = []
        for j in range(2):
            if i + j < len(characters_on_page):
                char_name = characters_on_page[i+j]
                char_info = ALL_PROMPTS.get(char_name, {})
                
                prefix = ""
                required_tier_name = char_info.get('required_tier', TIER_FREE)
                required_tier_level = TIER_HIERARCHY.get(required_tier_name, 0)
                
                if user_tier_level < required_tier_level:
                    prefix = "üîí "
                elif char_name == current_char_name:
                    prefix = "‚úÖ "
                
                display_name = f"{prefix}{html.escape(char_name)}"
                row.append(InlineKeyboardButton(display_name, callback_data=f"show_char_{char_name}"))
        keyboard.append(row)

    pagination_row = []
    if current_page > 0: pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="prev_char_page"))
    if total_pages > 1: pagination_row.append(InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="current_page_info"))
    if current_page < total_pages - 1: pagination_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="next_char_page"))
    if pagination_row: keyboard.append(pagination_row)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    return InlineKeyboardMarkup(keyboard)

async def _build_paginated_custom_char_keyboard(user_id: int, custom_chars: list, context: ContextTypes.DEFAULT_TYPE, mode: str) -> InlineKeyboardMarkup:
    page_key = CURRENT_CHAR_VIEW_PAGE_KEY if mode == 'view' else CURRENT_CHAR_MANAGE_PAGE_KEY
    current_page = context.user_data.get(page_key, 0)
    total_pages = (len(custom_chars) + config.CHARACTERS_PER_PAGE - 1) // config.CHARACTERS_PER_PAGE
    start_index = current_page * config.CHARACTERS_PER_PAGE
    end_index = start_index + config.CHARACTERS_PER_PAGE
    characters_on_page = custom_chars[start_index:end_index]
    
    action_prefixes = {'view': ("show_custom_char_", ""), 'edit': ("select_to_edit_", "üîß "), 'delete': ("delete_select_", "üóëÔ∏è ")}
    callback_prefix, icon = action_prefixes[mode]
    
    keyboard = []
    current_char_name = ""
    if mode == 'view':
        user = await db.get_user_by_id(user_id)
        current_char_name = user.get('current_character_name', DEFAULT_CHARACTER_NAME)
    for i in range(0, len(characters_on_page), 2):
        row = []
        for j in range(2):
            if i + j < len(characters_on_page):
                char = characters_on_page[i+j]
                display_name = f"{icon}{html.escape(char['name'])}"
                if mode == 'view' and char['name'] == current_char_name: display_name = f"‚úÖ {display_name}"
                row.append(InlineKeyboardButton(display_name, callback_data=f"{callback_prefix}{char['id']}"))
        keyboard.append(row)
    page_callback_prefixes = {
        'view': ("prev_custom_char_page", "next_custom_char_page"),
        'edit': ("prev_manage_page", "next_manage_page"),
        'delete': ("prev_manage_page", "next_manage_page")
    }
    prev_page_cb, next_page_cb = page_callback_prefixes[mode]
    pagination_row = []
    if current_page > 0: pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=prev_page_cb))
    if total_pages > 1: pagination_row.append(InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="current_page_info"))
    if current_page < total_pages - 1: pagination_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=next_page_cb))
    if pagination_row: keyboard.append(pagination_row)
    back_callbacks = {'view': "my_custom_characters_hub", 'edit': "back_to_manage_chars", 'delete': "back_to_manage_chars"}
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callbacks[mode])])
    return InlineKeyboardMarkup(keyboard)

async def show_character_categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = f"{html.escape(raw_text)}"
    keyboard = [
        [InlineKeyboardButton("üó£Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ", callback_data="category_conversational")],
        [InlineKeyboardButton("üéì –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", callback_data="category_specialists")],
        [InlineKeyboardButton("üéì AGM –£—á–∏—Ç–µ–ª—è", callback_data="category_teachers")],
        [InlineKeyboardButton("‚öîÔ∏è –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã (Quest)", callback_data="category_quest")],
        [InlineKeyboardButton("üé≠ –ú–æ–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏", callback_data="my_custom_characters_hub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query: await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else: await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_standard_characters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> None:
    query = update.callback_query
    if query.data.startswith("category_"):
        category_name = query.data.replace("category_", "")
        context.user_data[CURRENT_CHAR_CATEGORY_KEY] = category_name
        context.user_data[CURRENT_CHAR_VIEW_PAGE_KEY] = 0
    
    user_id = await get_user_id(update)
    reply_markup = await _build_standard_character_keyboard(user_id, context)
    
    category_name = context.user_data.get(CURRENT_CHAR_CATEGORY_KEY, "conversational")
    category_description = CATEGORY_DESCRIPTIONS.get(category_name, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    display_category_name = CATEGORY_DISPLAY_NAMES.get(category_name, category_name.capitalize())

    text = (
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{html.escape(display_category_name)}</b>\n"
        f"{html.escape(category_description)}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"
    )
    
    try: 
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    except BadRequest as e:
        if "Message is not modified" in str(e): 
            await query.answer()
        else: 
            raise
        
async def show_my_characters_hub_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = "üé≠ <b>–ú–æ–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏</b>"
    keyboard = [[InlineKeyboardButton("üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤—ã–±–æ—Ä", callback_data="view_my_chars")],[InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å–æ–∑–¥–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å)", callback_data="manage_custom_characters")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query: await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_paginated_custom_characters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, is_new_message: bool = False) -> None:
    context.user_data.setdefault(CURRENT_CHAR_VIEW_PAGE_KEY, 0)
    user_id = await get_user_id(update)
    custom_chars = await db.get_user_characters(user_id)
    if not custom_chars:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."
        keyboard = [[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="add_custom_char_start_from_empty")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_custom_characters_hub")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if is_new_message: await update.message.reply_text(text, reply_markup=reply_markup)
        else: await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        return
        
    reply_markup = await _build_paginated_custom_char_keyboard(user_id, custom_chars, context, mode='view')
    text = "<b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:"
    try:
        if is_new_message: await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else: await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    except BadRequest as e:
        if "Message is not modified" in str(e): await update.callback_query.answer()
        else: raise

async def show_manage_characters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    clear_temp_state(context)
    text = "üëæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏</b>"
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_custom_char_start")],[InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_custom_char_start")],[InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_custom_char_start")],[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_custom_characters_hub")]]
    if update.callback_query: await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def add_custom_char_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['original_update_for_creation'] = update
    context.user_data['state'] = STATE_WAITING_FOR_NEW_CHAR_NAME
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation_action")]]
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def edit_custom_char_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    context.user_data[MANAGE_MODE_KEY] = 'edit'
    context.user_data.setdefault(CURRENT_CHAR_MANAGE_PAGE_KEY, 0)
    user_id = await get_user_id(update)
    custom_chars = await db.get_user_characters(user_id)
    if not custom_chars: return await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.", show_alert=True)
    reply_markup = await _build_paginated_custom_char_keyboard(user_id, custom_chars, context, mode='edit')
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)

async def delete_custom_char_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    context.user_data[MANAGE_MODE_KEY] = 'delete'
    context.user_data.setdefault(CURRENT_CHAR_MANAGE_PAGE_KEY, 0)
    user_id = await get_user_id(update)
    custom_chars = await db.get_user_characters(user_id)
    if not custom_chars: return await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
    reply_markup = await _build_paginated_custom_char_keyboard(user_id, custom_chars, context, mode='delete')
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def show_edit_character_menu(message_to_edit: Message, context: ContextTypes.DEFAULT_TYPE):
    char_id = context.user_data.get(TEMP_CHAR_ID)
    if not char_id:
        await message_to_edit.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=None)
        return
    char_name = context.user_data.get(TEMP_CHAR_NAME)
    if not char_name:
        original_char = await db.get_character_by_id(char_id)
        if not original_char:
            await message_to_edit.edit_text("–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=None)
            return
        context.user_data[TEMP_CHAR_NAME] = original_char['name']
        context.user_data[TEMP_CHAR_PROMPT] = original_char['prompt']
        char_name = original_char['name']
        
    text = f"‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>{html.escape(char_name)}</b>"
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ò–º—è", callback_data=f"edit_name_{char_id}")],
        [InlineKeyboardButton("üìú –ò–∑–º–µ–Ω–∏—Ç—å –ü—Ä–æ–º–ø—Ç", callback_data=f"edit_prompt_{char_id}")],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_char_{char_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage_chars")]
    ]
    try:
        await message_to_edit.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    except BadRequest as e:
        if "Message is not modified" in str(e):
            pass
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é: {e}", exc_info=True)
            raise

async def prompt_for_new_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data['state'] = STATE_EDITING_CHAR_NAME
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_action_{context.user_data[TEMP_CHAR_ID]}")]]
    await update.callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def prompt_for_new_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    current_prompt = context.user_data.get(TEMP_CHAR_PROMPT, "–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    prompt_preview = (current_prompt[:1000] + '...') if len(current_prompt) > 1000 else current_prompt
    text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n<pre>{html.escape(prompt_preview)}</pre>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (—Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª)."
    context.user_data['state'] = STATE_EDITING_CHAR_PROMPT

    char_id = context.user_data.get(TEMP_CHAR_ID)
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª–µ txt", callback_data=f"show_full_prompt_{char_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_action_{char_id}")]
    ]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def select_char_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> None:
    query = update.callback_query
    char_id = int(query.data.replace("delete_select_", ""))
    char_data = await db.get_character_by_id(char_id)
    if not char_data:
        await query.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    keyboard = [[InlineKeyboardButton(f"‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å '{html.escape(char_data['name'])}'", callback_data=f"delete_confirm_{char_id}")],[InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data="delete_custom_char_start")]]
    await query.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=InlineKeyboardMarkup(keyboard))