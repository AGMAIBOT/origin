# handlers/ai_selection_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest

import database as db
from constants import TIER_PRO, GEMINI_STANDARD, OPENROUTER_DEEPSEEK, GPT_4_OMNI, OPENROUTER_GEMINI_2_FLASH

# <<< –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ö–∞–± –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ AI >>>
async def show_ai_mode_selection_hub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞: –¢–µ–∫—Å—Ç –∏–ª–∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    text = "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã AI*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å: –æ–±—â–∞—Ç—å—Å—è —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏", callback_data="select_mode_text")],
        [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="select_mode_image")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ >>>
async def show_text_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¢–ï–ö–°–¢–û–í–´–• –º–æ–¥–µ–ª–µ–π AI."""
    user_data = await db.get_user_by_telegram_id(update.effective_user.id)
    if not user_data or user_data.get('subscription_tier') != TIER_PRO:
        await update.callback_query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Pro-—Ç–∞—Ä–∏—Ñ–µ.", show_alert=True)
        return
        
    current_provider = user_data.get('current_ai_provider') or GEMINI_STANDARD

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, —Ç.–∫. –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ –≤—Å–µ–º–∏ AI >>>
    text = (
        "üìù *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò*\n\n"
        "–†–µ–∂–∏–º \"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏\" —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å—à–æ–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞.\n\n"
        "–í–∞—à —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:"
    )
    
    keyboard = [
        [InlineKeyboardButton(("‚úÖ " if current_provider == GPT_4_OMNI else "") + "GPT-4 Omni (–º–æ—â–Ω—ã–π)", callback_data=f"select_ai_{GPT_4_OMNI}")],
        [InlineKeyboardButton(("‚úÖ " if current_provider == GEMINI_STANDARD else "") + "Gemini (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, vision)", callback_data=f"select_ai_{GEMINI_STANDARD}")],
        [InlineKeyboardButton(("‚úÖ " if current_provider == OPENROUTER_GEMINI_2_FLASH else "") + "Gemini 2.0 Flash (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π)", callback_data=f"select_ai_{OPENROUTER_GEMINI_2_FLASH}")],
        [InlineKeyboardButton(("‚úÖ " if current_provider == OPENROUTER_DEEPSEEK else "") + "DeepSeek (—á–µ—Ä–µ–∑ OpenRouter)", callback_data=f"select_ai_{OPENROUTER_DEEPSEEK}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ai_mode_hub")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

# <<< –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–µ–Ω—é-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π >>>
async def show_image_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    text = "üé® *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ DALL¬∑E 3."
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ai_mode_hub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def set_ai_provider(telegram_id: int, provider: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    await db.db_request("UPDATE users SET current_ai_provider = ? WHERE telegram_id = ?", (provider, telegram_id))

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ >>>
async def handle_ai_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI –∏ –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    query = update.callback_query
    if not query: return False

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---
    if query.data == "select_mode_text":
        await query.answer()
        await show_text_ai_selection_menu(update, context)
        return True
    
    if query.data == "select_mode_image":
        await query.answer()
        await show_image_ai_selection_menu(update, context)
        return True
        
    if query.data == "back_to_ai_mode_hub":
        await query.answer()
        await show_ai_mode_selection_hub(update, context)
        return True

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¢–ï–ö–°–¢–û–í–û–ô –º–æ–¥–µ–ª–∏ ---
    if query.data.startswith("select_ai_"):
        new_provider = query.data.replace("select_ai_", "")
        user_id = update.effective_user.id
        
        await set_ai_provider(user_id, new_provider)
        
        provider_names = {
            GEMINI_STANDARD: "Gemini 1.5 Flash",
            OPENROUTER_DEEPSEEK: "DeepSeek (OpenRouter)",
            GPT_4_OMNI: "GPT-4 Omni",
            OPENROUTER_GEMINI_2_FLASH: "Gemini 2.0 Flash (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π)"
        }
        provider_name = provider_names.get(new_provider, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        
        await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {provider_name}")
        
        try:
            await show_text_ai_selection_menu(update, context)
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                pass

        return True
        
    return False