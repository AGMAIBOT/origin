# handlers/ai_selection_handler.py (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ù–ê HTML)

import html
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import database as db
import config
from utils import get_actual_user_tier, get_user_ai_provider
from constants import (
    TIER_PRO, GEMINI_STANDARD, OPENROUTER_DEEPSEEK, GPT_1, GPT_2,
    OPENROUTER_GEMINI_2_FLASH, STATE_WAITING_FOR_IMAGE_PROMPT, STATE_NONE,
    IMAGE_GEN_DALL_E_3, IMAGE_GEN_YANDEXART, CURRENT_IMAGE_GEN_PROVIDER_KEY,
    LAST_IMAGE_PROMPT_KEY, TIER_PRO, TIER_LITE,
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø DALL-E 3 –†–ê–ó–†–ï–®–ï–ù–ò–ô –ò –ö–õ–Æ–ß–ï–ô
    CURRENT_DALL_E_3_RESOLUTION_KEY, TRANSACTION_TYPE_IMAGE_GEN_COST
)
from ai_clients.yandexart_client import YandexArtClient
from ai_clients.factory import get_ai_client_with_caps
from telegram.constants import ChatAction
import os

logger = logging.getLogger(__name__)

async def show_ai_mode_selection_hub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = STATE_NONE

    text = "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã AI</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å: –æ–±—â–∞—Ç—å—Å—è —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏", callback_data="select_mode_text")],
        [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="select_mode_image")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_text_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await db.get_user_by_telegram_id(update.effective_user.id)
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –Ω–∞—à—É "—É–º–Ω—É—é" —Ñ—É–Ω–∫—Ü–∏—é
    current_provider = await get_user_ai_provider(user_data)
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tier = await get_actual_user_tier(user_data)
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ü–æ–ª—É—á–∞–µ–º "—Å–≤—è–∑–∫—É –∫–ª—é—á–µ–π" –¥–ª—è –µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    available_providers_for_tier = config.SUBSCRIPTION_TIERS[user_tier]['available_providers']
    
    text = (
        "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò</b>\n\n"
        "–†–µ–∂–∏–º \"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏\" —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å—à–æ–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.\n\n"
        "–í–∞—à —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:"
    )
    
    keyboard = []
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–∞
    for model_info in config.ALL_TEXT_MODELS_FOR_SELECTION:
        provider_id = model_info['provider_id']
        display_name = model_info['display_name']
        
        prefix = ""
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —ç—Ç–∞ –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å
        if provider_id == current_provider:
            prefix = "‚úÖ "
        # 2. –ï—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –æ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Ç–∞—Ä–∏—Ñ–µ
        elif provider_id not in available_providers_for_tier:
            prefix = "üîí "
            
        keyboard.append([
            InlineKeyboardButton(prefix + display_name, callback_data=f"select_ai_{provider_id}")
        ])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ai_mode_hub")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_image_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üé® <b>–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
    keyboard = [
        [InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="image_gen_create")],
        [InlineKeyboardButton("‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data="image_edit_wip")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ai_mode_hub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_image_generation_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
    keyboard = [
        [InlineKeyboardButton("ü§ñ GPT (DALL-E 3)", callback_data=f"select_image_gen_{IMAGE_GEN_DALL_E_3}")],
        [InlineKeyboardButton("üé® YandexArt", callback_data=f"select_image_gen_{IMAGE_GEN_YANDEXART}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_mode_image")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def prompt_for_image_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    image_gen_provider = context.user_data.get(CURRENT_IMAGE_GEN_PROVIDER_KEY)

    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üñºÔ∏è <b>–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n–ß—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω DALL-E 3, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if image_gen_provider == IMAGE_GEN_DALL_E_3:
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
        current_resolution = context.user_data.setdefault(CURRENT_DALL_E_3_RESOLUTION_KEY, config.DALL_E_3_DEFAULT_RESOLUTION)
        
        resolution_buttons = []
        for res_key, res_info in config.DALL_E_3_PRICING.items():
            display_name = res_info['display_name']
            cost_usd = res_info['cost_usd']
            cost_agm = int(cost_usd * config.USD_TO_AGM_RATE)
            
            prefix = "‚úÖ " if res_key == current_resolution else ""
            resolution_buttons.append(
                InlineKeyboardButton(
                    f"{prefix}{display_name} ({cost_agm} coin)",
                    callback_data=f"select_dalle3_res_{res_key}"
                )
            )
        keyboard.append(resolution_buttons) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É

    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="image_gen_create")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data['state'] = STATE_WAITING_FOR_IMAGE_PROMPT

    if query and query.message and query.message.text:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest as e:
            if "Message is not modified" in str(e): 
                await query.answer()
            else: 
                raise
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def set_ai_provider(telegram_id: int, provider: str):
    await db.db_request("UPDATE users SET current_ai_provider = ? WHERE telegram_id = ?", (provider, telegram_id))

async def handle_ai_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    query = update.callback_query
    if not query: return False

    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–´–ë–û–†–ê –†–ê–ó–†–ï–®–ï–ù–ò–Ø DALL-E 3
    if query.data.startswith("select_dalle3_res_"):
        new_resolution = query.data.replace("select_dalle3_res_", "")
        context.user_data[CURRENT_DALL_E_3_RESOLUTION_KEY] = new_resolution
        await query.answer(f"–í—ã–±—Ä–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.DALL_E_3_PRICING[new_resolution]['display_name']}")
        
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        await prompt_for_image_text(update, context) # –≠—Ç–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        return True

    if query.data == "image_create_new":
        await query.answer()
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ DALL-E 3 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        context.user_data.pop(CURRENT_DALL_E_3_RESOLUTION_KEY, None)
        await show_image_generation_ai_selection_menu(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        return True

    if query.data == "image_redraw":
        await query.answer("–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—é...")
        
        prompt_text = context.user_data.get(LAST_IMAGE_PROMPT_KEY)
        if not prompt_text:
            await query.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return True

        image_gen_provider = context.user_data.get(CURRENT_IMAGE_GEN_PROVIDER_KEY)
        
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏/–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
        reply_keyboard = [[
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å", callback_data="image_redraw"),
            InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="image_create_new")
        ]]
        reply_markup = InlineKeyboardMarkup(reply_keyboard)
        
        safe_prompt = html.escape(prompt_text)
        caption_text = f"‚ú® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n<code>{safe_prompt}</code>"

        if image_gen_provider == IMAGE_GEN_YANDEXART:
            await query.message.reply_text(f"üé® –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å –≤ YandexArt:\n\n<code>{safe_prompt}</code>", parse_mode='HTML')
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)
            try:
                yandex_client = YandexArtClient(folder_id=os.getenv("YANDEX_FOLDER_ID"), api_key=os.getenv("YANDEX_API_KEY"))
                image_bytes, error_message = await yandex_client.generate_image(prompt_text)
                if error_message: await query.message.reply_text(f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ: {error_message}")
                elif image_bytes: await query.message.reply_photo(photo=image_bytes, caption=caption_text, parse_mode='HTML', reply_markup=reply_markup)
                else: await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ YandexArt: {e}", exc_info=True)
                await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        elif image_gen_provider == IMAGE_GEN_DALL_E_3:
            # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ DALL-E 3 —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
            current_dalle3_resolution = context.user_data.get(CURRENT_DALL_E_3_RESOLUTION_KEY, config.DALL_E_3_DEFAULT_RESOLUTION)
            
            await query.message.reply_text(f"üé® –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å –≤ DALL-E 3 (—Ä–∞–∑–º–µ—Ä: {config.DALL_E_3_PRICING[current_dalle3_resolution]['display_name']}):\n\n<code>{safe_prompt}</code>", parse_mode='HTML')
            
            # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            cost_usd = config.DALL_E_3_PRICING[current_dalle3_resolution]['cost_usd']
            cost_agm = int(cost_usd * config.USD_TO_AGM_RATE)
            
            user_id_db = await db.add_or_update_user(update.effective_user.id, update.effective_user.full_name, update.effective_user.username)
            user_account_data = await db.get_user_by_id(user_id_db)
            user_balance = user_account_data.get('balance', 0)

            if user_balance < cost_agm:
                await query.message.reply_text(
                    f"üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ AGMcoin –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏. "
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}. –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost_agm}."
                )
                return True # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤

            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)
            try:
                # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ generate_image
                caps = get_ai_client_with_caps(GPT_1, system_instruction="You are an image generation assistant.")
                image_url, error_message = await caps.client.generate_image(prompt_text, size=current_dalle3_resolution)
                
                if error_message: 
                    await query.message.reply_text(f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ: {error_message}")
                elif image_url: 
                    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    await db.update_user_balance(
                        user_id_db, 
                        -cost_agm, 
                        TRANSACTION_TYPE_IMAGE_GEN_COST, 
                        description=f"–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ DALL-E 3 ({current_dalle3_resolution})"
                    )
                    await query.message.reply_photo(photo=image_url, caption=caption_text, parse_mode='HTML', reply_markup=reply_markup)
                else: 
                    await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ DALL-E 3: {e}", exc_info=True)
                await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        else:
            await query.message.reply_text("üòî –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏.")

        return True

    if query.data == "image_gen_cancel":
        context.user_data['state'] = STATE_NONE
        await query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await show_image_ai_selection_menu(update, context)
        return True 

    if query.data == "select_mode_text":
        await query.answer()
        await show_text_ai_selection_menu(update, context)
        return True
    
    if query.data == "select_mode_image":
        await query.answer()
        await show_image_ai_selection_menu(update, context)
        return True
        
    if query.data == "back_to_ai_mode_hub":
        await query.answer()
        await show_ai_mode_selection_hub(update, context)
        return True
    
    if query.data == "image_gen_create":
        await query.answer()
        await show_image_generation_ai_selection_menu(update, context)
        return True

    if query.data == "image_edit_wip":
        await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)
        return True

    if query.data.startswith("select_image_gen_"):
        image_gen_provider = query.data.replace("select_image_gen_", "")
        provider_names = {IMAGE_GEN_DALL_E_3: "GPT (DALL-E 3)", IMAGE_GEN_YANDEXART: "YandexArt"}
        provider_name = provider_names.get(image_gen_provider, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        context.user_data[CURRENT_IMAGE_GEN_PROVIDER_KEY] = image_gen_provider
        await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {provider_name}")
        await prompt_for_image_text(update, context)
        return True

    if query.data.startswith("select_ai_"):
        new_provider = query.data.replace("select_ai_", "")
        user_id = update.effective_user.id
        
        user_data = await db.get_user_by_telegram_id(user_id)
        user_tier = await get_actual_user_tier(user_data)
        available_providers_for_tier = config.SUBSCRIPTION_TIERS[user_tier]['available_providers']

        if new_provider not in available_providers_for_tier:
            await query.answer(f"üîí –≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–∞—Ö '{config.SUBSCRIPTION_TIERS[TIER_LITE]['name']}' –∏ '{config.SUBSCRIPTION_TIERS[TIER_PRO]['name']}'.", show_alert=True)
            return True

        await set_ai_provider(user_id, new_provider)
        
        provider_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
        for model in config.ALL_TEXT_MODELS_FOR_SELECTION:
            if model['provider_id'] == new_provider:
                provider_name = model['display_name'].replace("(—É–º–Ω—ã–π, vision)", "").replace("(–±—ã—Å—Ç—Ä—ã–π, vision)", "").strip()
                break
        
        await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {provider_name}")
        try: 
            await show_text_ai_selection_menu(update, context)
        except BadRequest as e:
            if "Message is not modified" not in str(e): 
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI: {e}")
                pass
        return True
        
    return False