# handlers/ai_selection_handler.py (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ù–ê HTML)

import html
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import database as db
from constants import (
    TIER_PRO, GEMINI_STANDARD, OPENROUTER_DEEPSEEK, GPT_4_OMNI, GPT_O4_MINI,
    OPENROUTER_GEMINI_2_FLASH, STATE_WAITING_FOR_IMAGE_PROMPT, STATE_NONE,
    IMAGE_GEN_DALL_E_3, IMAGE_GEN_YANDEXART, CURRENT_IMAGE_GEN_PROVIDER_KEY,
    LAST_IMAGE_PROMPT_KEY
)
from ai_clients.yandexart_client import YandexArtClient
from ai_clients.factory import get_ai_client_with_caps
from telegram.constants import ChatAction
import os

logger = logging.getLogger(__name__)

async def show_ai_mode_selection_hub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = STATE_NONE

    text = "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã AI</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å: –æ–±—â–∞—Ç—å—Å—è —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏", callback_data="select_mode_text")],
        [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="select_mode_image")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_text_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await db.get_user_by_telegram_id(update.effective_user.id)
    current_provider = user_data.get('current_ai_provider') or GEMINI_STANDARD
    text = (
        "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò</b>\n\n"
        "–†–µ–∂–∏–º \"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏\" —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å—à–æ–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞.\n\n"
        "–í–∞—à —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:"
    )
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∑–¥–µ—Å—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—ç—Ç–æ–º—É –∏—Ö –º–æ–∂–Ω–æ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
    keyboard = [
        [InlineKeyboardButton(("‚úÖ " if current_provider == GPT_O4_MINI else "") + "GPT-o4-mini (—É–º–Ω—ã–π, vision)", callback_data=f"select_ai_{GPT_O4_MINI}")],
        [InlineKeyboardButton(("‚úÖ " if current_provider == GPT_4_OMNI else "") + "GPT-4.1-nano (–±—ã—Å—Ç—Ä—ã–π, vision)", callback_data=f"select_ai_{GPT_4_OMNI}")],
        [InlineKeyboardButton(("‚úÖ " if current_provider == GEMINI_STANDARD else "") + "Gemini 1.5 Flash (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, vision)", callback_data=f"select_ai_{GEMINI_STANDARD}")],
        [InlineKeyboardButton(("‚úÖ " if current_provider == OPENROUTER_DEEPSEEK else "") + "DeepSeek (free OR)", callback_data=f"select_ai_{OPENROUTER_DEEPSEEK}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ai_mode_hub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_image_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üé® <b>–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
    keyboard = [
        [InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="image_gen_create")],
        [InlineKeyboardButton("‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data="image_edit_wip")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ai_mode_hub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_image_generation_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
    keyboard = [
        [InlineKeyboardButton("ü§ñ GPT (DALL-E 3)", callback_data=f"select_image_gen_{IMAGE_GEN_DALL_E_3}")],
        [InlineKeyboardButton("üé® YandexArt", callback_data=f"select_image_gen_{IMAGE_GEN_YANDEXART}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_mode_image")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def prompt_for_image_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = STATE_WAITING_FOR_IMAGE_PROMPT
    
    text = "üñºÔ∏è <b>–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n–ß—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="image_gen_create")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    
    if query and query.message and query.message.text:
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest as e:
            if "Message is not modified" in str(e): await query.answer()
            else: raise
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def set_ai_provider(telegram_id: int, provider: str):
    await db.db_request("UPDATE users SET current_ai_provider = ? WHERE telegram_id = ?", (provider, telegram_id))

async def handle_ai_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    query = update.callback_query
    if not query: return False

    if query.data == "image_create_new":
        await query.answer()
        await prompt_for_image_text(update, context)
        return True

    if query.data == "image_redraw":
        await query.answer("–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—é...")
        
        prompt_text = context.user_data.get(LAST_IMAGE_PROMPT_KEY)
        if not prompt_text:
            await query.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return True

        image_gen_provider = context.user_data.get(CURRENT_IMAGE_GEN_PROVIDER_KEY)
        
        reply_keyboard = [[
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å", callback_data="image_redraw"),
            InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="image_create_new")
        ]]
        reply_markup = InlineKeyboardMarkup(reply_keyboard)
        
        # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ò—Å–ø–æ–ª—å–∑—É–µ–º <code> –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –∏ parse_mode='HTML'
        safe_prompt = html.escape(prompt_text)
        caption_text = f"‚ú® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n<code>{safe_prompt}</code>"

        if image_gen_provider == IMAGE_GEN_YANDEXART:
            await query.message.reply_text(f"üé® –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å –≤ YandexArt:\n\n<code>{safe_prompt}</code>", parse_mode='HTML')
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ YandexArt)
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)
            try:
                yandex_client = YandexArtClient(folder_id=os.getenv("YANDEX_FOLDER_ID"), api_key=os.getenv("YANDEX_API_KEY"))
                image_bytes, error_message = await yandex_client.generate_image(prompt_text)
                if error_message: await query.message.reply_text(f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ: {error_message}")
                elif image_bytes: await query.message.reply_photo(photo=image_bytes, caption=caption_text, parse_mode='HTML', reply_markup=reply_markup)
                else: await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ YandexArt: {e}", exc_info=True)
                await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        elif image_gen_provider == IMAGE_GEN_DALL_E_3:
            await query.message.reply_text(f"üé® –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å –≤ DALL-E 3:\n\n<code>{safe_prompt}</code>", parse_mode='HTML')
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ DALL-E)
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)
            try:
                caps = get_ai_client_with_caps(GPT_4_OMNI, system_instruction="You are an image generation assistant.")
                image_url, error_message = await caps.client.generate_image(prompt_text)
                if error_message: await query.message.reply_text(f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ: {error_message}")
                elif image_url: await query.message.reply_photo(photo=image_url, caption=caption_text, parse_mode='HTML', reply_markup=reply_markup)
                else: await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ DALL-E 3: {e}", exc_info=True)
                await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        else:
            await query.message.reply_text("üòî –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏.")

        return True

    if query.data == "image_gen_cancel":
        context.user_data['state'] = STATE_NONE
        await query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await show_image_ai_selection_menu(update, context)
        return True 

    if query.data == "select_mode_text":
        await query.answer()
        await show_text_ai_selection_menu(update, context)
        return True
    
    if query.data == "select_mode_image":
        await query.answer()
        await show_image_ai_selection_menu(update, context)
        return True
        
    if query.data == "back_to_ai_mode_hub":
        await query.answer()
        await show_ai_mode_selection_hub(update, context)
        return True
    
    if query.data == "image_gen_create":
        await query.answer()
        await show_image_generation_ai_selection_menu(update, context)
        return True

    if query.data == "image_edit_wip":
        await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)
        return True

    if query.data.startswith("select_image_gen_"):
        # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        image_gen_provider = query.data.replace("select_image_gen_", "")
        provider_names = {IMAGE_GEN_DALL_E_3: "GPT (DALL-E 3)", IMAGE_GEN_YANDEXART: "YandexArt"}
        provider_name = provider_names.get(image_gen_provider, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        context.user_data[CURRENT_IMAGE_GEN_PROVIDER_KEY] = image_gen_provider
        await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {provider_name}")
        await prompt_for_image_text(update, context)
        return True

    if query.data.startswith("select_ai_"):
        # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        user_data = await db.get_user_by_telegram_id(update.effective_user.id)
        if not user_data or user_data.get('subscription_tier') != TIER_PRO:
            await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Pro-—Ç–∞—Ä–∏—Ñ–µ.", show_alert=True)
            return True 
        new_provider = query.data.replace("select_ai_", "")
        user_id = update.effective_user.id
        await set_ai_provider(user_id, new_provider)
        provider_names = {
            GEMINI_STANDARD: "Gemini 1.5 Flash", OPENROUTER_DEEPSEEK: "DeepSeek (OpenRouter)",
            GPT_4_OMNI: "GPT-4.1 nano", GPT_O4_MINI: "GPT-o4-mini",
            OPENROUTER_GEMINI_2_FLASH: "Gemini 2.0 Flash (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π)"
        }
        provider_name = provider_names.get(new_provider, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {provider_name}")
        try: await show_text_ai_selection_menu(update, context)
        except BadRequest as e:
            if "Message is not modified" not in str(e): pass
        return True
        
    return False