# handlers/ai_selection_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

import database as db
from constants import TIER_PRO, GEMINI_STANDARD, OPENROUTER_DEEPSEEK, GPT_4_OMNI

async def show_ai_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI —Ç–æ–ª—å–∫–æ –¥–ª—è Pro –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    user_data = await db.get_user_by_telegram_id(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Pro-—Ç–∞—Ä–∏—Ñ
    if not user_data or user_data.get('subscription_tier') != TIER_PRO:
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ AI –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Pro-—Ç–∞—Ä–∏—Ñ–µ.")
        return
        
    current_provider = user_data.get('current_ai_provider') or GEMINI_STANDARD

    text = (
        "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò*\n\n"
        "–ü—Ä–∏ –≤—ã–±–æ—Ä–µ `DeepSeek` –∏–ª–∏ `GPT` —Ä–µ–∂–∏–º \"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏\" –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. "
        "–ë–æ—Ç –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Å –≤–∞–º–∏ –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥.\n\n"
        "–í–∞—à —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(
                ("‚úÖ " if current_provider == GEMINI_STANDARD else "") + "Gemini (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, vision)",
                callback_data=f"select_ai_{GEMINI_STANDARD}"
            )
        ],
        [
            InlineKeyboardButton(
                ("‚úÖ " if current_provider == OPENROUTER_DEEPSEEK else "") + "DeepSeek (—á–µ—Ä–µ–∑ OpenRouter)",
                callback_data=f"select_ai_{OPENROUTER_DEEPSEEK}"
            )
        ],
        [
            InlineKeyboardButton(
                ("‚úÖ " if current_provider == GPT_4_OMNI else "") + "GPT-4 Omni (–º–æ—â–Ω—ã–π)",
                callback_data=f"select_ai_{GPT_4_OMNI}"
            )
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def set_ai_provider(telegram_id: int, provider: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    await db.db_request("UPDATE users SET current_ai_provider = ? WHERE telegram_id = ?", (provider, telegram_id))


async def handle_ai_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä AI –∏–∑ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é."""
    query = update.callback_query
    if not query or not query.data.startswith("select_ai_"):
        return False
        
    new_provider = query.data.replace("select_ai_", "")
    user_id = update.effective_user.id
    
    await set_ai_provider(user_id, new_provider)
    
    provider_names = {
        GEMINI_STANDARD: "Gemini",
        OPENROUTER_DEEPSEEK: "DeepSeek (OpenRouter)",
        GPT_4_OMNI: "GPT-4 Omni"
    }
    provider_name = provider_names.get(new_provider, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
    
    await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {provider_name}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, —á—Ç–æ–±—ã –≥–∞–ª–æ—á–∫–∞ –ø–µ—Ä–µ–¥–≤–∏–Ω—É–ª–∞—Å—å
    user_data = await db.get_user_by_telegram_id(user_id)
    current_provider = user_data.get('current_ai_provider')
    
    keyboard = [
        [
            InlineKeyboardButton(
                ("‚úÖ " if current_provider == GEMINI_STANDARD else "") + "Gemini (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, vision)",
                callback_data=f"select_ai_{GEMINI_STANDARD}"
            )
        ],
        [
            InlineKeyboardButton(
                ("‚úÖ " if current_provider == OPENROUTER_DEEPSEEK else "") + "DeepSeek (—á–µ—Ä–µ–∑ OpenRouter)",
                callback_data=f"select_ai_{OPENROUTER_DEEPSEEK}"
            )
        ],
        [
            InlineKeyboardButton(
                ("‚úÖ " if current_provider == GPT_4_OMNI else "") + "GPT-4 Omni (–º–æ—â–Ω—ã–π)",
                callback_data=f"select_ai_{GPT_4_OMNI}"
            )
        ]
    ]
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

    return True