# handlers/profile_handler.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ù–ê HTML)

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: escape_markdown –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
from telegram.error import BadRequest
# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –î–æ–±–∞–≤–ª—è–µ–º html –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
import html
import config
from constants import *
from utils import get_actual_user_tier, require_verification
import database as db

logger = logging.getLogger(__name__)


@require_verification
async def show_profile_hub(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = await db.add_or_update_user(telegram_id=update.effective_user.id, full_name=update.effective_user.full_name, username=update.effective_user.username)
    user_data = await db.get_user_by_id(user_id)
    if not user_data:
        return

    current_tier_name = await get_actual_user_tier(user_data)
    tier_params = config.SUBSCRIPTION_TIERS[current_tier_name]
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í–º–µ—Å—Ç–æ escape_markdown –∏—Å–ø–æ–ª—å–∑—É–µ–º html.escape –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –≠—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç "–∏–Ω—ä–µ–∫—Ü–∏–∏ HTML-—Ç–µ–≥–æ–≤", –µ—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç < –∏–ª–∏ >.
    user_name = html.escape(user_data.get('full_name', 'N/A'))
    user_tg_id = user_data.get('telegram_id', 'N/A')
    tier_display_name = html.escape(tier_params['name'])
    
    limit_info = ""
    if tier_params['daily_limit'] is not None:
        requests_made = user_data.get('daily_requests_count', 0)
        requests_limit = tier_params['daily_limit']
        progress = int((requests_made / requests_limit) * 10)
        progress_bar = 'üü©' * progress + '‚¨úÔ∏è' * (10 - progress)
        limit_info = (f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:</b>\n<code>{requests_made} / {requests_limit}</code> –∑–∞–ø—Ä–æ—Å–æ–≤\n{progress_bar}\n")
    else:
        limit_info = "üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n"
    
    expiry_info = ""
    if current_tier_name != TIER_FREE and user_data.get('subscription_expiry_date'):
        expiry_date_str = user_data.get('subscription_expiry_date')
        expiry_date = datetime.fromisoformat(expiry_date_str) if isinstance(expiry_date_str, str) else expiry_date_str
        if expiry_date: expiry_info = f"üóìÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> {expiry_date.strftime('%d.%m.%Y %H:%M')}\n"
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í—Å—è —Ä–∞–∑–º–µ—Ç–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ HTML —Ç–µ–≥–∏
    text = (f"üë§ <b>–í–∞—à –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üè∑Ô∏è <b>–ò–º—è:</b> {user_name}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user_tg_id}</code>\n\n"
            f"‚≠ê <b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b> <i>{tier_display_name}</i>\n"
            f"{expiry_info}\n{limit_info}"
            f"<i>–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 UTC</i>")

    keyboard = [
        [
            InlineKeyboardButton("üëõ –ö–æ—à–µ–ª–µ–∫ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data=PROFILE_HUB_WALLET),
            InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data=PROFILE_HUB_SHOP)
        ],
        [InlineKeyboardButton("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=PROFILE_HUB_SETTINGS)],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ú–µ–Ω—è–µ–º parse_mode –Ω–∞ HTML
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest as e:
            if "Message is not modified" in str(e): await update.callback_query.answer()
            else: raise
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    text = "üõ†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∫–∞–∫ –±–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≤–∞–º–∏."
    
    keyboard = [
        [InlineKeyboardButton("üìù –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞", callback_data=SETTINGS_OUTPUT_FORMAT)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile_hub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def show_format_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_data = await db.get_user_by_telegram_id(update.effective_user.id)
    current_format = user_data.get('output_format', OUTPUT_FORMAT_TEXT)

    text = "üìù <b>–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç AI:"
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!
    keyboard = [
        [InlineKeyboardButton(
            ("‚úÖ " if current_format == OUTPUT_FORMAT_TEXT else "") + "–¢–µ–∫—Å—Ç –≤ —á–∞—Ç–µ", 
            callback_data=FORMAT_SET_TEXT
        )],
        [InlineKeyboardButton(
            ("‚úÖ " if current_format == OUTPUT_FORMAT_TXT else "") + "–§–∞–π–ª .txt",
            callback_data=FORMAT_SET_TXT
        )],
        [InlineKeyboardButton(
            ("‚úÖ " if current_format == OUTPUT_FORMAT_PDF else "") + "–§–∞–π–ª .pdf (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", 
            callback_data=FORMAT_SET_PDF
        )],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=SETTINGS_BACK_TO_PROFILE_HUB)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def set_output_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    format_map = {
        FORMAT_SET_TEXT: OUTPUT_FORMAT_TEXT,
        FORMAT_SET_TXT: OUTPUT_FORMAT_TXT,
        FORMAT_SET_PDF: OUTPUT_FORMAT_PDF,
    }
    new_format = format_map.get(query.data)
    
    user = await db.get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await db.set_user_output_format(user_id=user['id'], output_format=new_format)
    await query.answer(f"–§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_format}'")
    
    await show_format_selection_menu(update, context)


async def handle_profile_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    query = update.callback_query
    if not query: return False
    
    routes = {
        "refresh_profile": show_profile_hub,
        "back_to_profile_hub": show_profile_hub,
        PROFILE_HUB_SETTINGS: show_settings_menu,
        SETTINGS_BACK_TO_PROFILE_HUB: show_settings_menu,
        SETTINGS_OUTPUT_FORMAT: show_format_selection_menu,
        FORMAT_BACK_TO_SETTINGS: show_settings_menu,
        FORMAT_SET_TEXT: set_output_format,
        FORMAT_SET_TXT: set_output_format,
        FORMAT_SET_PDF: set_output_format,
    }

    if query.data in [PROFILE_HUB_WALLET, PROFILE_HUB_SHOP]:
        await query.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)
        return True

    handler = routes.get(query.data)
    if handler:
        await handler(update, context)
        return True
        
    return False