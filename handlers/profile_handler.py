# handlers/profile_handler.py (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–û–®–ï–õ–¨–ö–û–ú –ò –†–ï–§–ï–†–ê–õ–ö–û–ô)

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import html
import config
from constants import * 
from utils import get_actual_user_tier, require_verification
import database as db

logger = logging.getLogger(__name__)

@require_verification
async def show_profile_hub(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = await db.add_or_update_user(telegram_id=update.effective_user.id, full_name=update.effective_user.full_name, username=update.effective_user.username)
    user_data = await db.get_user_by_id(user_id)
    if not user_data:
        return

    current_tier_name = await get_actual_user_tier(user_data)
    tier_params = config.SUBSCRIPTION_TIERS[current_tier_name]
    
    user_name = html.escape(user_data.get('full_name', 'N/A'))
    user_tg_id = user_data.get('telegram_id', 'N/A')
    tier_display_name = html.escape(tier_params['name'])
    
    limit_info = ""
    if tier_params['daily_limit'] is not None:
        requests_made = user_data.get('daily_requests_count', 0)
        requests_limit = tier_params['daily_limit']
        progress = int((requests_made / requests_limit) * 10)
        progress_bar = 'üü©' * progress + '‚¨úÔ∏è' * (10 - progress)
        limit_info = (f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:</b>\n<code>{requests_made} / {requests_limit}</code> –∑–∞–ø—Ä–æ—Å–æ–≤\n{progress_bar}\n")
    else:
        limit_info = "üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n"
    
    expiry_info = ""
    if current_tier_name != TIER_FREE and user_data.get('subscription_expiry_date'):
        expiry_date_str = user_data.get('subscription_expiry_date')
        expiry_date = datetime.fromisoformat(expiry_date_str) if isinstance(expiry_date_str, str) else expiry_date_str
        if expiry_date: expiry_info = f"üóìÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> {expiry_date.strftime('%d.%m.%Y %H:%M')}\n"
    
    user_balance = user_data.get('balance', 0)
    balance_info = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å AGMcoin:</b> <code>{user_balance}</code>\n"

    text = (f"üë§ <b>–í–∞—à –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üè∑Ô∏è <b>–ò–º—è:</b> {user_name}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user_tg_id}</code>\n\n"
            f"{balance_info}\n"
            f"‚≠ê <b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b> <i>{tier_display_name}</i>\n"
            f"{expiry_info}\n"
            f"{limit_info}"
            f"<i>–°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 UTC</i>")

    keyboard = [
        [
            InlineKeyboardButton("üëõ –ö–æ—à–µ–ª–µ–∫", callback_data=WALLET_HUB), 
            InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data=PROFILE_HUB_SHOP)
        ],
        [InlineKeyboardButton("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=PROFILE_HUB_SETTINGS)],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        except BadRequest as e:
            if "Message is not modified" in str(e): await update.callback_query.answer()
            else: raise
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = await db.add_or_update_user(telegram_id=update.effective_user.id, full_name=update.effective_user.full_name, username=update.effective_user.username)
    user_data = await db.get_user_by_id(user_id)
    if not user_data:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    user_balance = user_data.get('balance', 0)
    
    text = (
        f"üëõ <b>–í–∞—à –ö–æ—à–µ–ª–µ–∫</b>\n\n"
        f"‚ú® <b>–ë–∞–ª–∞–Ω—Å AGMcoin:</b> <code>{user_balance}</code>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AGMcoin –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤."
    )

    keyboard = [
        [InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=WALLET_TOPUP_START)],
        [InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data=WALLET_REFERRAL_PROGRAM)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=WALLET_BACK_TO_PROFILE)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    except BadRequest as e:
        if "Message is not modified" in str(e): await query.answer()
        else: raise

async def handle_topup_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer("–†–∞–∑–¥–µ–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã!", show_alert=True)

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def show_referral_program_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = await db.add_or_update_user(telegram_id=update.effective_user.id, full_name=update.effective_user.full_name, username=update.effective_user.username)
    user_data = await db.get_user_by_id(user_id)
    if not user_data:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    user_telegram_id = user_data['telegram_id'] # –ù—É–∂–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    referrals = await db.get_user_referrals(user_id)
    referral_earnings = await db.get_user_referral_earnings(user_id)

    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_info = await context.bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_telegram_id}"
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ {config.REFERRAL_PERCENTAGE}% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{html.escape(referral_link)}</code>\n\n" # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(referrals)}</b>\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: <b>{referral_earnings} AGMcoin</b>\n\n"
        f"<i>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.</i>"
    )

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=WALLET_HUB)] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ö–æ—à–µ–ª—å–∫–∞
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    except BadRequest as e:
        if "Message is not modified" in str(e): await query.answer()
        else: raise


async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    text = "üõ†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∫–∞–∫ –±–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≤–∞–º–∏."
    
    keyboard = [
        [InlineKeyboardButton("üìù –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞", callback_data=SETTINGS_OUTPUT_FORMAT)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile_hub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def show_format_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_data = await db.get_user_by_telegram_id(update.effective_user.id)
    current_format = user_data.get('output_format', OUTPUT_FORMAT_TEXT)

    text = "üìù <b>–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç AI:"
    
    keyboard = [
        [InlineKeyboardButton(
            ("‚úÖ " if current_format == OUTPUT_FORMAT_TEXT else "") + "–¢–µ–∫—Å—Ç –≤ —á–∞—Ç–µ", 
            callback_data=FORMAT_SET_TEXT
        )],
        [InlineKeyboardButton(
            ("‚úÖ " if current_format == OUTPUT_FORMAT_TXT else "") + "–§–∞–π–ª .txt",
            callback_data=FORMAT_SET_TXT
        )],
        [InlineKeyboardButton(
            ("‚úÖ " if current_format == OUTPUT_FORMAT_PDF else "") + "–§–∞–π–ª .pdf", 
            callback_data=FORMAT_SET_PDF
        )],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=SETTINGS_BACK_TO_PROFILE_HUB)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def set_output_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    format_map = {
        FORMAT_SET_TEXT: OUTPUT_FORMAT_TEXT,
        FORMAT_SET_TXT: OUTPUT_FORMAT_TXT,
        FORMAT_SET_PDF: OUTPUT_FORMAT_PDF,
    }
    new_format = format_map.get(query.data)
    
    user = await db.get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await db.set_user_output_format(user_id=user['id'], output_format=new_format)
    await query.answer(f"–§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_format}'")
    
    await show_format_selection_menu(update, context)

async def handle_profile_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    query = update.callback_query
    if not query: return False
    
    routes = {
        "refresh_profile": show_profile_hub,
        "back_to_profile_hub": show_profile_hub,
        PROFILE_HUB_SETTINGS: show_settings_menu,
        SETTINGS_BACK_TO_PROFILE_HUB: show_settings_menu,
        SETTINGS_OUTPUT_FORMAT: show_format_selection_menu,
        FORMAT_BACK_TO_SETTINGS: show_settings_menu,
        FORMAT_SET_TEXT: set_output_format,
        FORMAT_SET_TXT: set_output_format,
        FORMAT_SET_PDF: set_output_format,
        
        WALLET_HUB: show_wallet_menu,
        WALLET_TOPUP_START: handle_topup_start,
        WALLET_REFERRAL_PROGRAM: show_referral_program_menu, # <<< [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –¢–µ–ø–µ—Ä—å –≤–µ–¥–µ—Ç –Ω–∞ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        WALLET_BACK_TO_PROFILE: show_profile_hub, 
    }

    if query.data in [PROFILE_HUB_SHOP]:
        await query.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)
        return True

    handler = routes.get(query.data)
    if handler:
        await handler(update, context)
        return True
        
    return False