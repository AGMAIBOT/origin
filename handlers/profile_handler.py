# handlers/profile_handler.py (–ü–û–õ–ù–ê–Ø –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –° –ó–ê–©–ò–¢–û–ô)

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown
from telegram.error import BadRequest

import config
from constants import TIER_FREE
from utils import get_actual_user_tier, require_verification # <<< –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
import database as db

logger = logging.getLogger(__name__)

# <<< –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∑–¥–µ—Å—å
@require_verification
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ show_profile –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    user_id = await db.add_or_update_user(telegram_id=update.effective_user.id, full_name=update.effective_user.full_name, username=update.effective_user.username)
    if not user_id:
        if update.callback_query: await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
        else: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    user_data = await db.get_user_by_id(user_id)
    if not user_data:
        if update.callback_query: await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        else: await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    current_tier_name = await get_actual_user_tier(user_data)
    tier_params = config.SUBSCRIPTION_TIERS[current_tier_name]
    user_name = escape_markdown(user_data.get('full_name', 'N/A'), version=2)
    user_tg_id = user_data.get('telegram_id', 'N/A')
    tier_display_name = escape_markdown(tier_params['name'], version=2)
    limit_info = ""
    if tier_params['daily_limit'] is not None:
        requests_made = user_data.get('daily_requests_count', 0)
        requests_limit = tier_params['daily_limit']
        progress = int((requests_made / requests_limit) * 10)
        progress_bar = 'üü©' * progress + '‚¨úÔ∏è' * (10 - progress)
        limit_info = (f"üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:*\n`{requests_made} / {requests_limit}` –∑–∞–ø—Ä–æ—Å–æ–≤\n{progress_bar}\n")
    else:
        limit_info = "üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:* –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ\n"
    expiry_info = ""
    if current_tier_name != TIER_FREE and user_data.get('subscription_expiry_date'):
        expiry_date_str = user_data.get('subscription_expiry_date')
        expiry_date = datetime.fromisoformat(expiry_date_str) if isinstance(expiry_date_str, str) else expiry_date_str
        if expiry_date: expiry_info = f"üóìÔ∏è *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {expiry_date.strftime('%d\\.%m\\.%Y %H:%M')}\n"
    text = (f"üë§ *–í–∞—à –ü—Ä–æ—Ñ–∏–ª—å*\n\nüè∑Ô∏è *–ò–º—è:* {user_name}\nüÜî *Telegram ID:* `{user_tg_id}`\n\n‚≠ê *–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:* *{tier_display_name}*\n{expiry_info}\n{limit_info}_–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 UTC\\._")
    keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')
        except BadRequest as e:
            if "Message is not modified" in str(e): await update.callback_query.answer(text="–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", show_alert=True)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')

# <<< –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∏ –∑–¥–µ—Å—å
@require_verification
async def handle_profile_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    query = update.callback_query
    if not query: return False
    if query.data == "refresh_profile":
        await show_profile(update, context)
        return True
    return False