# handlers/post_processing_handler.py (–ù–û–í–´–ô –§–ê–ô–õ)

import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from constants import *
import config

logger = logging.getLogger(__name__)

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å.
ACTION_PROMPTS = {
    ACTION_SHORTEN: "–†–µ–∑—é–º–∏—Ä—É–π —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç.",
    ACTION_EXPAND: "–†–∞–∑–≤–µ—Ä–Ω–∏ —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç.",
    ACTION_REPHRASE: "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç."
}

def get_post_processing_keyboard(text_length: int) -> InlineKeyboardMarkup | None:
    """
    [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –Ω–∏—á–µ–≥–æ.
    """
    buttons = []
    # –û—Ç–≤–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã
    if config.POST_PROCESSING_SHORT_THRESHOLD <= text_length < config.POST_PROCESSING_LONG_THRESHOLD:
        if text_length <= config.POST_PROCESSING_MEDIUM_THRESHOLD:
            buttons.append(InlineKeyboardButton("‚ÜîÔ∏è –†–∞—Å–∫—Ä–æ–π –º—ã—Å–ª—å", callback_data=ACTION_EXPAND))
            buttons.append(InlineKeyboardButton("‚úçÔ∏è –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π", callback_data=ACTION_REPHRASE))
    # –î–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    elif text_length >= config.POST_PROCESSING_LONG_THRESHOLD:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è‚¨ÖÔ∏è –°–æ–∫—Ä–∞—Ç–∏", callback_data=ACTION_SHORTEN))
        buttons.append(InlineKeyboardButton("‚úçÔ∏è –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π", callback_data=ACTION_REPHRASE))
    
    if not buttons:
        return None
        
    return InlineKeyboardMarkup([buttons])


async def handle_post_processing_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∫—Ä–∞—Ç–∏", "–†–∞—Å–∫—Ä–æ–π", "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π".
    """
    query = update.callback_query
    action = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ –Ω–∞—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
    if action not in ACTION_PROMPTS:
        return False # –≠—Ç–æ –Ω–µ –Ω–∞—à callback, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ

    await query.answer()

    last_response = context.user_data.get(LAST_RESPONSE_KEY)
    if not last_response:
        await query.edit_message_reply_markup(None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await query.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∂–¥–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.")
        return True

    user_prompt = ACTION_PROMPTS[action]
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í–∞–∂–Ω–æ! –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π.
    await query.edit_message_reply_markup(None)
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
    from main import process_ai_request

    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∞ "–≤–Ω–µ–¥—Ä—è–µ–º—Å—è" –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω —Ç–∞–º —É–∂–µ –±—ã–ª.
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ê –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à "—Å–∫—Ä—ã—Ç—ã–π" –ø—Ä–æ–º–ø—Ç ("–°–æ–∫—Ä–∞—Ç–∏" –∏ —Ç.–¥.).
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞!
    
    # –ü–æ–ª—É—á–∞–µ–º user_data —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ–º, –ø–æ—ç—Ç–æ–º—É —Å–æ–±–∏—Ä–∞–µ–º –≤—Ä—É—á–Ω—É—é
    from utils import inject_user_data
    
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ª—è–º–±–¥—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    async def wrapped_process(update, context, user_data):
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.chat_data.setdefault('history', []).append({'role': 'model', 'parts': [last_response]})
        await process_ai_request(update, context, user_data, user_prompt)

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–µ—Ä–Ω—É—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await inject_user_data(wrapped_process)(update, context)

    return True