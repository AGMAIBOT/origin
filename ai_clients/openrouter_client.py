# ai_clients/openrouter_client.py

import logging
from typing import List, Dict, Tuple
from PIL.Image import Image
from openai import AsyncOpenAI, RateLimitError, Timeout
import base64
from io import BytesIO

import config 
from .base_client import BaseAIClient
# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —É—Ç–∏–ª–∏—Ç—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –≤–µ—Ä–Ω–æ–µ (aiutils). >>>
from .aiutils import prepare_openai_history

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è _pil_to_base64 –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def _pil_to_base64(image: Image) -> str:
    buffered = BytesIO()
    if image.mode == 'RGBA':
        image = image.convert('RGB')
    image.save(buffered, format="JPEG")
    img_bytes = buffered.getvalue()
    return base64.b64encode(img_bytes).decode('utf-8')


class OpenRouterClient(BaseAIClient):
    def __init__(self, api_key: str, system_instruction: str, model_name: str):
        self._client = AsyncOpenAI(
            api_key=api_key,
            base_url=config.OPENROUTER_API_BASE_URL,
            timeout=Timeout(60.0)
        )
        self._model_name = model_name
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ >>>
        self._system_instruction_content = system_instruction
        
        self._extra_headers = {
            "HTTP-Referer": config.OPENROUTER_SITE_URL,
            "X-Title": config.OPENROUTER_SITE_NAME,
        }
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç OpenRouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: '{model_name}'.")

    async def get_text_response(self, chat_history: List[Dict], user_prompt: str) -> Tuple[str, int]:
        
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∫–æ–¥ –Ω–∞ –≤—ã–∑–æ–≤ –Ω–∞—à–µ–π —É—Ç–∏–ª–∏—Ç—ã >>>
        messages = prepare_openai_history(
            system_instruction_content=self._system_instruction_content,
            chat_history=chat_history,
            user_prompt=user_prompt
        )
        
        try:
            response = await self._client.chat.completions.create(
                model=self._model_name, 
                messages=messages, 
                extra_headers=self._extra_headers
            )
            response_text = response.choices[0].message.content
            tokens_spent = response.usage.total_tokens if response.usage else 0
            return response_text, tokens_spent
        except RateLimitError as e:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç Rate Limit –¥–ª—è –º–æ–¥–µ–ª–∏ {self._model_name} —á–µ—Ä–µ–∑ OpenRouter: {e}")
            error_details = "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if e.body and 'error' in e.body and e.body['error'].get('metadata', {}).get('raw'):
                error_details = f"–û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e.body['error']['metadata']['raw']}"
            return f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. {error_details}", 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç OpenRouter API: {e}", exc_info=True)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter: {e}", 0

    # –ú–µ—Ç–æ–¥ get_image_response —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç—ã
    async def get_image_response(self, chat_history: List[Dict], text_prompt: str, image: Image) -> Tuple[str, int]:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Vision –º–æ–¥–µ–ª–∏ {self._model_name} —á–µ—Ä–µ–∑ OpenRouter")
        base64_image = _pil_to_base64(image)
        
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–æ—Ç–æ–≤–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã >>>
        messages = prepare_openai_history(
            system_instruction_content=self._system_instruction_content,
            chat_history=chat_history,
            user_prompt="" # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç, —Ç.–∫. –¥–æ–±–∞–≤–∏–º –µ–≥–æ –Ω–∏–∂–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        )
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è
        if not messages[-1]["content"]:
            messages.pop()

        messages.append({
            "role": "user", 
            "content": [
                {"type": "text", "text": text_prompt}, 
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
            ]
        })
        
        try:
            response = await self._client.chat.completions.create(
                model=self._model_name, 
                messages=messages, 
                max_tokens=2048, 
                extra_headers=self._extra_headers
            )
            response_text = response.choices[0].message.content
            tokens_spent = response.usage.total_tokens if response.usage else 0
            return response_text, tokens_spent
        except RateLimitError as e:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç Rate Limit –¥–ª—è –º–æ–¥–µ–ª–∏ {self._model_name} —á–µ—Ä–µ–∑ OpenRouter: {e}")
            error_details = "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if e.body and 'error' in e.body and e.body['error'].get('metadata', {}).get('raw'):
                error_details = f"–û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e.body['error']['metadata']['raw']}"
            return f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. {error_details}", 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç OpenRouter Vision API: {e}", exc_info=True)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter Vision: {e}", 0