# ai_clients/openrouter_client.py

import logging
from typing import List, Dict, Tuple
from PIL.Image import Image
from openai import AsyncOpenAI, RateLimitError, Timeout
import base64
from io import BytesIO

import config 
from .base_client import BaseAIClient

logger = logging.getLogger(__name__)

def _pil_to_base64(image: Image) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç PIL Image –≤ —Å—Ç—Ä–æ–∫—É Base64."""
    buffered = BytesIO()
    if image.mode == 'RGBA':
        image = image.convert('RGB')
    image.save(buffered, format="JPEG")
    img_bytes = buffered.getvalue()
    return base64.b64encode(img_bytes).decode('utf-8')


class OpenRouterClient(BaseAIClient):
    @property
    def supports_characters(self) -> bool:
        return False

    # V-- –í–û–¢ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ô –ö–û–ù–°–¢–†–£–ö–¢–û–†, –ö–û–¢–û–†–´–ô –í–°–ï –ò–°–ü–†–ê–í–ò–¢ --V
    def __init__(self, api_key: str, system_instruction: str, model_name: str):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenRouter.
        """
        self._client = AsyncOpenAI(
            api_key=api_key,
            base_url=config.OPENROUTER_API_BASE_URL,
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –∑–¥–µ—Å—å
            timeout=Timeout(60.0)
        )
        self._model_name = model_name
        self._system_instruction = {"role": "system", "content": system_instruction}
        
        self._extra_headers = {
            "HTTP-Referer": config.OPENROUTER_SITE_URL,
            "X-Title": config.OPENROUTER_SITE_NAME,
        }
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç OpenRouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: '{model_name}'.")
    # ^-- –ö–û–ù–ï–¶ –ö–û–ù–°–¢–†–£–ö–¢–û–†–ê --^

    async def get_text_response(self, chat_history: List[Dict], user_prompt: str) -> Tuple[str, int]:
        # ... (—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        messages = [self._system_instruction]
        for msg in chat_history:
            if not (msg.get("parts") and msg["parts"][0]):
                continue
            role = "assistant" if msg["role"] == "model" else msg["role"]
            messages.append({"role": role, "content": msg["parts"][0]})
        messages.append({"role": "user", "content": user_prompt})
        try:
            response = await self._client.chat.completions.create(model=self._model_name, messages=messages, extra_headers=self._extra_headers)
            response_text = response.choices[0].message.content
            tokens_spent = response.usage.total_tokens if response.usage else 0
            return response_text, tokens_spent
        except RateLimitError as e:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç Rate Limit –¥–ª—è –º–æ–¥–µ–ª–∏ {self._model_name} —á–µ—Ä–µ–∑ OpenRouter: {e}")
            error_details = "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if e.body and 'error' in e.body and e.body['error'].get('metadata', {}).get('raw'):
                error_details = f"–û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e.body['error']['metadata']['raw']}"
            return f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. {error_details}", 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç OpenRouter API: {e}", exc_info=True)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter: {e}", 0

    async def get_image_response(self, chat_history: List[Dict], text_prompt: str, image: Image) -> Tuple[str, int]:
        # ... (—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–æ–∂–µ —É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Vision –º–æ–¥–µ–ª–∏ {self._model_name} —á–µ—Ä–µ–∑ OpenRouter")
        base64_image = _pil_to_base64(image)
        messages = [self._system_instruction]
        for msg in chat_history:
            if not (msg.get("parts") and msg["parts"][0]):
                continue
            role = "assistant" if msg["role"] == "model" else msg["role"]
            messages.append({"role": role, "content": msg["parts"][0]})
        messages.append({"role": "user", "content": [{"type": "text", "text": text_prompt}, {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}]})
        try:
            response = await self._client.chat.completions.create(model=self._model_name, messages=messages, max_tokens=2048, extra_headers=self._extra_headers)
            response_text = response.choices[0].message.content
            tokens_spent = response.usage.total_tokens if response.usage else 0
            return response_text, tokens_spent
        except RateLimitError as e:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç Rate Limit –¥–ª—è –º–æ–¥–µ–ª–∏ {self._model_name} —á–µ—Ä–µ–∑ OpenRouter: {e}")
            error_details = "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if e.body and 'error' in e.body and e.body['error'].get('metadata', {}).get('raw'):
                error_details = f"–û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e.body['error']['metadata']['raw']}"
            return f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. {error_details}", 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç OpenRouter Vision API: {e}", exc_info=True)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter Vision: {e}", 0