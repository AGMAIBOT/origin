# main.py

import os
import logging
# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
import asyncio
from dotenv import load_dotenv
from typing import List

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_admin_ids(ids_string: str) -> List[int]:
    admin_ids = []
    for admin_id_str in ids_string.split(','):
        cleaned_id_str = admin_id_str.strip()
        if not cleaned_id_str: continue
        try: admin_ids.append(int(cleaned_id_str))
        except ValueError: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ '{cleaned_id_str}'.")
    return admin_ids

load_dotenv()
admin_ids_from_env = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = parse_admin_ids(admin_ids_from_env)

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á OpenAI –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

from io import BytesIO
from PIL import Image
from telegram import Update, BotCommand
# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –î–æ–±–∞–≤–ª—è–µ–º filters.VOICE –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.helpers import escape_markdown
from telegram.constants import ChatAction
from google.api_core.exceptions import ResourceExhausted

import database as db
import config
from constants import (
    STATE_NONE, STATE_WAITING_FOR_IMAGE_PROMPT, TIER_LITE, TIER_PRO, 
    TIER_FREE, GPT_4_OMNI, CURRENT_IMAGE_GEN_PROVIDER_KEY, 
    IMAGE_GEN_DALL_E_3, IMAGE_GEN_YANDEXART, GEMINI_STANDARD
)
from characters import DEFAULT_CHARACTER_NAME, ALL_PROMPTS
from handlers import character_menus, characters_handler, profile_handler, captcha_handler, ai_selection_handler

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —É—Ç–∏–ª–∏—Ç—É –∏ GPTClient –¥–ª—è Whisper
import utils
from utils import get_main_keyboard, send_long_message, get_actual_user_tier, require_verification, get_text_content_from_document, FileSizeError, inject_user_data
from ai_clients.factory import get_ai_client_with_caps
from ai_clients.gpt_client import GPTClient
from ai_clients.yandexart_client import YandexArtClient

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def process_ai_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict, user_content: str, is_photo: bool = False, image_obj: Image = None, is_document: bool = False, document_char_count: int = 0):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    ai_provider = user_data.get('current_ai_provider') or GEMINI_STANDARD
    user_id = user_data['id']
    char_name = user_data.get('current_character_name', DEFAULT_CHARACTER_NAME)
    custom_char = await db.get_custom_character_by_name(user_id, char_name)
    system_instruction = custom_char['prompt'] if custom_char else ALL_PROMPTS.get(char_name, "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.")
    try:
        caps = get_ai_client_with_caps(ai_provider, system_instruction)
        ai_client = caps.client
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    if is_photo and not caps.supports_vision:
        await update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å AI –Ω–µ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    if is_document:
        if caps.file_char_limit == 0:
            await update.message.reply_text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ AI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        if document_char_count > caps.file_char_limit:
            await update.message.reply_text(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: {caps.file_char_limit} —Å–∏–º–≤–æ–ª–æ–≤, –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ: {document_char_count}.")
            return
    history_len = await db.get_history_length(user_id, char_name)
    if history_len > config.HISTORY_LIMIT_TRIGGER:
        await db.trim_chat_history(user_id, char_name, config.HISTORY_TRIM_TO)
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    try:
        chat_history = await db.get_chat_history(user_id, char_name, limit=config.DEFAULT_HISTORY_LIMIT)
        if is_photo and image_obj:
            response_text, _ = await ai_client.get_image_response(chat_history, user_content, image_obj)
            db_user_content = f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {user_content}"
        else:
            response_text, _ = await ai_client.get_text_response(chat_history, user_content)
            db_user_content = user_content
        await db.add_message_to_history(user_id, char_name, 'user', db_user_content)
        await db.add_message_to_history(user_id, char_name, 'model', response_text)
        await send_long_message(update, response_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")

# ... (–∫–æ–º–∞–Ω–¥—ã start, reset, set_subscription, show_wip_notice –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await db.add_or_update_user(user.id, user.full_name, user.username)
    user_data = await db.get_user_by_telegram_id(user.id)
    if not user_data or not user_data.get('is_verified'):
        await captcha_handler.send_captcha(update, context)
        return
    welcome_text = (f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.mention_html()}!\n\n"
                    "–Ø —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
                    "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –º–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å –∏–ª–∏ –ª–∏—á–Ω–æ—Å—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é <b>'–ü–µ—Ä—Å–æ–Ω–∞–∂–∏'</b>.")
    await update.message.reply_html(text=welcome_text, reply_markup=get_main_keyboard())

@require_verification
@inject_user_data
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict):
    char_name_to_reset = user_data.get('current_character_name', DEFAULT_CHARACTER_NAME)
    display_name = char_name_to_reset
    await db.clear_chat_history(user_data['id'], char_name_to_reset)
    await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å *{escape_markdown(display_name, version=2)}* –æ—á–∏—â–µ–Ω–∞\\.", parse_mode='MarkdownV2')

@require_verification
async def set_subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /setsub –æ—Ç user_id={update.effective_user.id}")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        if len(context.args) != 3: raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        target_user_id_str, tier, days_str = context.args
        target_user_id = int(target_user_id_str)
        days = int(days_str)
        if tier not in [TIER_LITE, TIER_PRO, TIER_FREE]:
            await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '{TIER_LITE}', '{TIER_PRO}' –∏–ª–∏ '{TIER_FREE}'")
            return
        await db.set_user_subscription(target_user_id, tier, days)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é telegram_id={target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ '{tier}' –Ω–∞ {days} –¥–Ω–µ–π.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setsub <telegram_id> <tier> <days>\n–ü—Ä–∏–º–µ—Ä: /setsub 12345 lite 30\n–î–µ—Ç–∞–ª–∏: {e}")

@require_verification
async def show_wip_notice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    
@require_verification
@inject_user_data
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    current_state = context.user_data.get('state', STATE_NONE)
    if current_state == STATE_WAITING_FOR_IMAGE_PROMPT:
        prompt_text = update.message.text
        if not prompt_text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
            return
        image_gen_provider = context.user_data.get(CURRENT_IMAGE_GEN_PROVIDER_KEY)
        if image_gen_provider == IMAGE_GEN_DALL_E_3:
            context.user_data['state'] = STATE_NONE
            await update.message.reply_text("üé® –ü—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞—é —Ä–∏—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ DALL-E 3, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)
            try:
                caps = get_ai_client_with_caps(GPT_4_OMNI, system_instruction="You are an image generation assistant.")
                image_url, error_message = await caps.client.generate_image(prompt_text)
                if error_message: await update.message.reply_text(f"üòî –û—à–∏–±–∫–∞: {error_message}")
                elif image_url: await update.message.reply_photo(photo=image_url, caption=f"‚ú® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n`{prompt_text}`", parse_mode='Markdown')
                else: await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DALL-E 3: {e}", exc_info=True)
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        elif image_gen_provider == IMAGE_GEN_YANDEXART:
            # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –ù–ê –î–õ–ò–ù–£ –ü–†–û–ú–ü–¢–ê
            if len(prompt_text) > config.YANDEXART_PROMPT_LIMIT:
                await update.message.reply_text(
                    f"üòî –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è YandexArt —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.\n\n"
                    f"–ú–∞–∫—Å–∏–º—É–º: {config.YANDEXART_PROMPT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤. –£ –≤–∞—Å: {len(prompt_text)}.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –≤ API
                return

            context.user_data['state'] = STATE_NONE
            await update.message.reply_text("üé® –ü—Ä–∏–Ω—è—Ç–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ YandexArt, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç...")
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.UPLOAD_PHOTO)
            try:
                yandex_client = YandexArtClient(
                    folder_id=os.getenv("YANDEX_FOLDER_ID"),
                    api_key=os.getenv("YANDEX_API_KEY")
                )
                image_bytes, error_message = await yandex_client.generate_image(prompt_text)
                if error_message: await update.message.reply_text(f"üòî –û—à–∏–±–∫–∞: {error_message}")
                elif image_bytes: await update.message.reply_photo(photo=image_bytes, caption=f"‚ú® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç YandexArt –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n`{prompt_text}`", parse_mode='Markdown')
                else: await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ YandexArt: {e}", exc_info=True)
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        else:
            context.user_data['state'] = STATE_NONE
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –º–µ–Ω—é.")
        return
    if await characters_handler.handle_stateful_message(update, context):
        return
    tier_params = config.SUBSCRIPTION_TIERS[await get_actual_user_tier(user_data)]
    if tier_params['daily_limit'] is not None:
        usage = await db.get_and_update_user_usage(user_data['id'], tier_params['daily_limit'])
        if not usage["can_request"]:
            return await update.message.reply_text(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ '{tier_params['name']}'.")
    user_content, image_obj, is_photo, is_document, document_char_count = None, None, False, False, 0
    if update.message.photo:
        is_photo = True
        file_bytes = await (await context.bot.get_file(update.message.photo[-1].file_id)).download_as_bytearray()
        image_obj = Image.open(BytesIO(file_bytes))
        user_content = update.message.caption or "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    elif update.message.document:
        is_document = True
        try:
            file_content = await get_text_content_from_document(update.message.document, context)
            document_char_count = len(file_content)
            task_prompt = update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞:"
            user_content = f"{task_prompt}\n\n---\n\n{file_content}"
        except (ValueError, FileSizeError) as e:
            return await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    elif update.message.text:
        user_content = update.message.text
    if not user_content: return
    await process_ai_request(update, context, user_data, user_content, is_photo=is_photo, image_obj=image_obj, is_document=is_document, document_char_count=document_char_count)

# [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
@require_verification
@inject_user_data
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    tier_params = config.SUBSCRIPTION_TIERS[await get_actual_user_tier(user_data)]
    if tier_params['daily_limit'] is not None:
        usage = await db.get_and_update_user_usage(user_data['id'], tier_params['daily_limit'])
        if not usage["can_request"]:
            return await update.message.reply_text(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ '{tier_params['name']}'.")

    # 2. –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    status_message = await update.message.reply_text("üéôÔ∏è –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é...")
    
    try:
        # 3. –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        voice_file = await context.bot.get_file(update.message.voice.file_id)
        oga_bytes = await voice_file.download_as_bytearray()
        
        # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGA –≤ MP3
        loop = asyncio.get_running_loop()
        mp3_bytes = await loop.run_in_executor(None, utils.convert_oga_to_mp3_in_memory, oga_bytes)
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ Whisper
        # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Whisper –Ω–∞–º –Ω—É–∂–µ–Ω –∫–ª—é—á OpenAI
        if not OPENAI_API_KEY:
            raise ValueError("API –∫–ª—é—á –¥–ª—è OpenAI (–Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è Whisper) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç GPT —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –º–æ–¥–µ–ª—å –Ω–µ –≤–∞–∂–Ω—ã, —Ç.–∫. –º—ã –≤—ã–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
        gpt_client_for_whisper = GPTClient(api_key=OPENAI_API_KEY, system_instruction="", model_name="")
        recognized_text = await gpt_client_for_whisper.transcribe_audio(mp3_bytes)
        
        # 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if recognized_text:
            await status_message.edit_text(f"<i>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</i>\n\n¬´{recognized_text}¬ª\n\nüß† –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...", parse_mode='HTML')
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await process_ai_request(update, context, user_data, user_content=recognized_text)
        else:
            await status_message.edit_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await status_message.edit_text(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ffmpeg
        if "No such file or directory: 'ffmpeg'" in str(e) or "Cannot find specified file" in str(e):
             await status_message.edit_text("–û—à–∏–±–∫–∞: –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Ç–∏–ª–∏—Ç–∞ `ffmpeg`.")
        else:
            await status_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if await captcha_handler.handle_captcha_callback(update, context): return
    if await ai_selection_handler.handle_ai_selection_callback(update, context): return
    user_data = await db.get_user_by_telegram_id(update.effective_user.id)
    if not user_data or not user_data.get('is_verified'):
        await update.callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞–∂–∞–≤ /start", show_alert=True)
        return
    if await characters_handler.handle_character_callbacks(update, context): return
    if await profile_handler.handle_profile_callbacks(update, context): return
    await update.callback_query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")

async def post_init(application: Application):
    await application.bot.set_my_commands([BotCommand("start", "–ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"), BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")])

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("setsub", set_subscription_command))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–í—ã–±–æ—Ä AI$"), require_verification(ai_selection_handler.show_ai_mode_selection_hub)))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ü–µ—Ä—Å–æ–Ω–∞–∂–∏$"), require_verification(character_menus.show_character_categories_menu)))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ü—Ä–æ—Ñ–∏–ª—å$"), profile_handler.show_profile))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), show_wip_notice))
    
    # [Dev-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–∞
    app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    
    app.add_handler(MessageHandler((filters.TEXT & ~filters.COMMAND) | filters.PHOTO | filters.Document.MimeType("text/plain"), handle_message))
    app.add_handler(CallbackQueryHandler(button_callback_handler))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    app.run_polling()

if __name__ == "__main__":
    main()